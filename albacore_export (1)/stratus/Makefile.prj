
##############################################################################
# Makefile generated by bdw_makegen version 23.02-s006
#      Cadence Design Systems
#      Sun Apr 27 10:38:20 EDT 2025
#          Project file was <project.tcl>
##############################################################################

GENERATING_STRATUS_VERSION = 23.02-s006

# Check that we have Stratus on our path
ifneq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
    $(error Stratus executable was not found. Please add Stratus installation to your search path, and run 'bdw_makegen' command.)
endif

CURRENT_STRATUS_VERSION := $(shell bdw_shell -version)
CURRENT_STRATUS_VERSION := $(shell echo $(CURRENT_STRATUS_VERSION) | cut -d ' ' -f 3)

# Check that this Makefile.prj was generated by the current stratus version
ifneq ($(MAKECMDGOALS),force_clean_all)
ifneq ($(CURRENT_STRATUS_VERSION),$(GENERATING_STRATUS_VERSION))
    $(info ERROR: Makefile.prj was created with a different version of Stratus.)
    $(info - Run 'bdw_makegen' to regenerate Makefile.prj or)
    $(info - run 'make force_clean_all' to clean the entire project and regenerate Makefile.prj.)
    $(error Exiting)
endif
endif

# Provide a rule that allows make to do nothing but employ the above version check
stratus_version_check:
	@echo $(CURRENT_STRATUS_VERSION)

.PHONY: force_clean_all
force_clean_all:
	@echo "Removing Makefile.prj and regenerating."
	@rm -f Makefile.prj
	@bdw_makegen project.tcl
	@make clean_all

# Dependencies on tcl files source by the project file.
Makefile.prj: project.tcl

######################################################################
## Exported variables.  
## Each of these variables will be accessible to all child processes.
######################################################################

export BDW_TECH_LIBS	=	/projects/nd/TSMC_PDK_PATH/tsmc/180MSRFG/STD_CELL/tcb018gbwp7t_290a/TSMCHOME/digital/Front_End/timing_power_noise/NLDM/tcb018gbwp7t_270a/tcb018gbwp7ttc.lib
export BDW_WORKLIB
ifeq ($(BDW_WORKLIB),)
	BDW_WORKLIB = bdw_work
endif
export BDW_SPECLIB
ifeq ($(BDW_SPECLIB),)
	BDW_SPECLIB = project.db
endif

ifeq ($(shell if `which bdw_shell >&/dev/null` ; then echo 1; fi),1)
export STRATUS_HOME := $(shell echo "puts [get_install_path]" | bdw_shell)
else
export STRATUS_HOME := /apps/STRATUS2302/23.02.006
endif
export STRATUS_PLATFORM := lnx86

export BDW_TCL_DIR = $(STRATUS_HOME)/share/stratus/tcl


export BDW_SYSTEMC_VERSION = 2.3.3


# Use Incisive gcc 6.3 for simulations
export BDW_NCSC_GCCVER := -GCC_VERS 6.3



ifeq ($(BDW_DEBUG),1)
BDW_DEBUG_DIR = /debug
else
BDW_DEBUG_DIR =
endif

ifeq ($(BDW_BASE_SIM_CONFIG),)
BDW_BASE_SIM_CONFIG=$(BDW_SIM_CONFIG)
endif
ifeq ($(BDW_SPEC_NAME),)
BDW_SPEC_SUF=
BDW_SPEC_ARG=' '
else
BDW_SPEC_SUF=_$(BDW_SPEC_NAME)
BDW_SPEC_ARG=$(BDW_SPEC_NAME)
endif

ifeq ($(BDW_GENDEP),)
export BDW_GENDEPS=0
endif
export ARITH_HOME = /apps/STRATUS2302/23.02.006/tools.lnx86/cellmath
export BDW_USE_ESCLIB = 1
export BDW_VERILOG_DIALECT = 1995
export BDW_OBJDIR		=	$(BDW_WORKLIB)/objs/xcelium
export BDW_SIMDIR		=	$(BDW_WORKLIB)/sims
export BDW_MODULEDIR	=	$(BDW_WORKLIB)/modules
export BDW_LIBDIR		=	$(BDW_WORKLIB)/libs/xcelium
export BDW_WRAPDIR		=	$(BDW_WORKLIB)/wrappers
export BDW_HLSLIB_DIRS
export BDW_HLSLIB_NAMES
export BDW_PROJECT_FILE =   project.tcl
export BDW_SIM_CONFIG
export BDW_SIM_CONFIG_DIR
export BDW_LS_CONFIG
export BDW_LS_CONFIG_DIR
export BDW_LS_CONFIG_LOGS
export BDW_POWER_CONFIG
export BDW_POWER_CONFIG_DIR
export BDW_VRTL_FILE
export BDW_MODULE
export BDW_HLS_CONFIG
export BDW_HLS_CONFIG_DIR
export BDW_CYNTH_CONFIG
export BDW_CYNTH_CONFIG_DIR
export BDW_LS_INFO

export BDW_VISTA = 0
export BDW_NCSC = 1
export BDW_XMSC = 1
export BDW_VLOGSIM_ARGS
export BDW_VERILOG_SIM_ARGS
export BDW_VLOGCOMP_ARGS
export BDW_VLOG_LIBS
export BDW_VLOG_DEFINES
export BDW_VLOG_DUT_FILES
export BDW_VLOG_DUMPFILE
export BDW_UPF_DATA_FILES
export BDW_UPF_MODULES
export BDW_PWR_DASH_NETLIST
export BDW_EXTRA_LDFLAGS
export BDW_EXTRA_LIBS
export BDW_EXTRA_LIB_FLAGS
export BDW_COV_LIB_FLAGS
export BDW_EXTRA_CCFLAGS
export BDW_CCOPTIONS
export BDW_SCSIM_ARGS
export BDW_HUB_ARGV
export BDW_USE_SCV
export BDW_FSDBVCSPLATFORM
BDW_FSDBVCSPLATFORM = LINUX64
export BDW_USE_SCV = 0
ifeq ($(CM_USERLOGDIR),)
	export CM_USERLOGDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif
ifeq ($(CM_USERTMPDIR),)
	export CM_USERTMPDIR = $(shell pwd)/$(BDW_WORKLIB)/tmp
endif

# Provide backwards compatibility with CONF variable used in some applications
# to set the configuration on the command line.
ifneq ($(CONF),)
	BDW_SIM_CONFIG = $(CONF)
endif


######################################################################
## Definitions for remote execution
######################################################################
export BDW_EXEC_CMD
export BDW_PMAKE_FLG
ifeq ($(BDW_EXEC_CMD),)
    BDW_EXEC_CMD=
endif

######################################################################
## Definitions for user defined tool command scripts
######################################################################



ifeq ($(BDW_STRATUS_HLS_COMMAND),)
    BDW_STRATUS_HLS_COMMAND = stratus_hls
endif
ifeq ($(BDW_STRATUS_IDE_COMMAND),)
    BDW_STRATUS_IDE_COMMAND = stratus_ide
endif
ifeq ($(BDW_WRAPGEN_COMMAND),)
    BDW_WRAPGEN_COMMAND = bdw_wrapgen
endif
ifeq ($(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND),)
    BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_HLS_COMMAND),)
    BDW_LAUNCH_HLS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_SIM_COMMAND),)
    BDW_LAUNCH_SIM_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND),)
    BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_POWER_COMMAND),)
    BDW_LAUNCH_POWER_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_ANALYSIS_COMMAND),)
    BDW_LAUNCH_ANALYSIS_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_EQUIV_COMMAND),)
    BDW_LAUNCH_EQUIV_COMMAND = $(BDW_LAUNCH_COMMAND)
endif
ifeq ($(BDW_LAUNCH_IDE_COMMAND),)
    BDW_LAUNCH_IDE_COMMAND = $(BDW_LAUNCH_COMMAND)
endif

######################################################################
## Definitions for compilation and synthesis
######################################################################

MAKE			   = make --no-print-directory -f $(firstword $(MAKEFILE_LIST))
PERL			   = perl
CYNTHHL            = $(BDW_STRATUS_HLS_COMMAND)
CYNTHVLG		   = ${STRATUS_HOME}/bin/stratus_vlg --project project.tcl
ifneq ($(BDW_TMPLNK_DIR),)
BDW_TMPLNK_FILE    := $(shell $(STRATUS_HOME)/bin/bdw_tmpfile $(BDW_TMPLNK_DIR)/BDWLNK.$(USER).XXXXXX)
endif

######################################################################
## Set variables for and include BDW common Makefile bdw.mak
######################################################################

export BDW_USEHUB	   = $(BDW_USE_ESCLIB)
export BDW_USECYNTH	   = 1
export BDW_WRITEFSDB   = 0
ifeq ($(BDW_WRITEFSDB),1)
	export BDW_NOVAS_INST_DIR = $(shell $(STRATUS_HOME)/bin/bdw_find_novas_install)
	ifeq ($(wildcard $(BDW_NOVAS_INST_DIR)/share/PLI/VCS*),$(BDW_NOVAS_INST_DIR)/share/PLI/VCS)
		# The PLI/VCS dir is an indication that this is a 2010 or later Novas release, and we can use automatic VCS platform selection.
		BDW_FSDB_VCS_ARGS = -debug_pp -LDFLAGS -Wl,-rpath,$(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM) -P $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/VCS/$(BDW_FSDBVCSPLATFORM)/pli.a
	else
		# For older versions of Novas, use vcs_latest, which works with all supported VCS versions.
		BDW_FSDB_VCS_ARGS = -P $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/novas.tab $(BDW_NOVAS_INST_DIR)/share/PLI/vcs_latest/$(BDW_FSDBVCSPLATFORM)/pli.a
	endif
else
	BDW_FSDB_VCS_ARGS =
endif
BDW_INCLUDE_DIRS = ../src ../sc_main
BDW_CCFLAGS        = -I./ -I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(addprefix -I,$(BDW_INCLUDE_DIRS))
ifneq ($(BDW_SIM_CONFIG),)
    BDW_SOURCES		   += ../sc_main/sc_top.cpp
endif
BDW_CCOPTIONS	   =  -DCLOCK_PERIOD=5.0  
BDW_XMSC_SCFE_OPT  = 0
BDW_COV_LIB_FLAGS  = 
BDW_DEP_FILTER	   = | bdw_depfilter project.tcl
BDW_SPEC_FILTER    = $(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_specutil.tcl -filter
BDW_SPEC_CHECK     = $(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_specutil.tcl -check
BDW_SPEC_CLEAN     = $(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_specutil.tcl -clean $(BDW_PROJECT_FILE)
BDW_SPEC_DELETE    = $(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_specutil.tcl -delete $(BDW_PROJECT_FILE)
BDW_COPY_IMPORT    = $(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_copy_import.tcl -proj_file $(BDW_PROJECT_FILE)

VPATH += $(BDW_INCLUDE_DIRS)

vpath %.bdt $(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/lib

BDW_LOGOPTIONS_FILE = $(BDW_WRAPDIR)/.logOptions

# rule to create .logOptions if it gets accidentally removed
$(BDW_LOGOPTIONS_FILE): project.tcl
	@bdw_makegen project.tcl -q 

######################################################################
# Preparation for concurrent builds target
######################################################################


ifeq ($(CWBExec_prep),1)
prep_all all_deps: 
	$(BDW_LAUNCH_UPDATE_WRAPPERS_COMMAND) $(MAKE) update_hierarchy prep_vlog_all gen_all_deps
else
prep_all all_deps:
	bdw_exec -jobproject $(BDW_PROJECT_FILE) -job prep_all $(MAKE) CWBExec_prep=1 prep_all
endif


######################################################################
## Start of Configurations
######################################################################
BDW_SHAREDLIB		=	0
BDW_VLOG_DUT_FILES	=	
VLOG_COSIM_TOP	=
BDW_ALL_WRAPPERS    =


HL_FLAGS           = --logfile=stratus_hls.log -I. -I$(BDW_WRAPDIR) --c++14 $(BDW_EXTRA_HLFLAGS) $(addprefix --tl=,$(BDW_TECH_LIBS)) -DCLOCK_PERIOD=5.0 --clock_period=5.000 --default_input_delay=0.000 --dpopt_auto=op --flatten_arrays=all --method_processing=synthesize --output_style_reset_all=on --output_style_structure_only=off --parts_effort=low --power=on --prints=off --relax_timing=on --sched_asap=off --unroll_loops=on --wireload=none -I$(STRATUS_HOME)/share/stratus/include
VLG_FLAGS          = -DBDW_RTL=1 -I$(BDW_WRAPDIR) --c++14 $(BDW_EXTRA_VLGFLAGS)

HL_FLAGS_datapath_BASIC	= -DBASIC=1 -DBDW_RTL_datapath_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_datapath_BASIC)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/datapath_wrap.h
HL_FLAGS_controller_BASIC	= -DBASIC=1 -DBDW_RTL_controller_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_controller_BASIC)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/controller_wrap.h
HL_FLAGS_memory_map_BASIC	= -DBASIC=1 -DBDW_RTL_memory_map_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_memory_map_BASIC)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/memory_map_wrap.h
HL_FLAGS_top_BASIC	= -DBASIC=1 -DBDW_RTL_top_BASIC=1 $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_top_BASIC)))
BDW_ALL_WRAPPERS += $(BDW_WORKLIB)/wrappers/top_wrap.h
ifeq ($(BDW_BASE_SIM_CONFIG),B)

BDW_SHAREDLIB = 1
BDW_NCSC_INPUT_FILE = -input $(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/datapath.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/controller.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/memory_map.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/top.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/datapath.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/controller.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/memory_map.o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/top.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)/xcelium$(BDW_DEBUG_DIR)
BDW_CCFLAGS         +=  
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
VLOG_COSIM_TOP		=	
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_FLAGS      =   
BDW_NCSC_COV_OPTS   =   
BDW_VERILOG_SIM_ARGS =   
BDW_VLOG_DUT_FILES	+=	 
BDW_UPF_DATA_FILES  =  
BDW_UPF_MODULES     =  
BDW_PWR_DASH_NETLIST = 0
BDW_VLOG_LIBS		=	
BDW_VLOG_DUMPFILE   =   $(subst /B/,/B$(BDW_SPEC_SUF)/,)
BDW_VLOG_DEFINES	=	
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/datapath_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/datapath.d $(BDW_WORKLIB)/wrappers/controller_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/controller.d $(BDW_WORKLIB)/wrappers/memory_map_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/memory_map.d $(BDW_WORKLIB)/wrappers/top_wrap.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/top.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/sc_top.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/top.d $(BDW_OBJDIR)/memory_map.d $(BDW_OBJDIR)/controller.d $(BDW_OBJDIR)/datapath.d 
SIM_RTL_TARGETS		=

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	ncsc
	BDW_VLOG_SIM_PATH =	
endif


else
ifeq ($(BDW_BASE_SIM_CONFIG),V)

BDW_SHAREDLIB		= 1
BDW_NCSC_INPUT_FILE = -input $(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
BDW_ESC_LIB = $(libesc_WORKDIR)/libesc.a
BDW_SIM_CONFIG_DIR  =   $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
ifeq ($(BDW_DEBUG),1)
SIM_OBJS			=	$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath.o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller.o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map.o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top.o $(BDW_OBJS) 
else
SIM_OBJS			=	$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath.o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller.o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map.o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top.o $(BDW_OBJS) 
endif
BDW_OBJDIR          =   $(BDW_SIM_CONFIG_DIR)/xcelium$(BDW_DEBUG_DIR)
BDW_CCFLAGS         += -DBDW_RTL_datapath_BASIC -DBDW_RTL_controller_BASIC -DBDW_RTL_memory_map_BASIC -DBDW_RTL_top_BASIC 
BDW_XRUN_FLAGS      = 
BDW_OBJS		    = $(addprefix $(BDW_OBJDIR)/, $(addsuffix .o, $(basename $(notdir $(BDW_SOURCES)))))
BDW_DEPS		    = $(BDW_OBJS:.o=.d)
VLOG_COSIM_TOP		=	$(BDW_WORKLIB)/sims/top1_V.v
BDW_SC_TOP          =   -top sc_main
BDW_NCSC_FLAGS      =   
BDW_NCSC_COV_OPTS   =   
BDW_VERILOG_SIM_ARGS =   
BDW_VLOG_DUT_FILES	+=	$(BDW_WORKLIB)/wrappers/top_cosim.v 
BDW_UPF_DATA_FILES  =  $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_upf.data $(BDW_WORKLIB)/modules/controller/BASIC/controller_upf.data $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_upf.data $(BDW_WORKLIB)/modules/top/BASIC/top_upf.data
BDW_UPF_MODULES     =  datapath controller memory_map top
BDW_PWR_DASH_NETLIST = 0
BDW_VLOG_LIBS		=	-y $(BDW_WORKLIB)/modules/datapath/BASIC/v_rtl -y $(BDW_WORKLIB)/modules/controller/BASIC/v_rtl -y $(BDW_WORKLIB)/modules/memory_map/BASIC/v_rtl -y $(BDW_WORKLIB)/modules/top/BASIC/v_rtl
BDW_VLOG_DUMPFILE   =   $(subst /V/,/V$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/sims/V/V.shm)
BDW_VLOG_DEFINES	=	 +define+ioConfig +define+BDW_RTL_datapath_BASIC +define+ioConfig +define+BDW_RTL_controller_BASIC +define+ioConfig +define+BDW_RTL_memory_map_BASIC +define+ioConfig +define+BDW_RTL_top_BASIC
BDW_VLOG_TOP_MODS   =   
BDW_VERILOG_TESTBENCH = 
BDW_CPARTS_A		=	
BDW_LIBPREP			=	$(BDW_VLOG_LIBPREP) prep_vlog_datapath_BASIC prep_vlog_controller_BASIC prep_vlog_memory_map_BASIC prep_vlog_top_BASIC
BDW_LIBREF          =   $(BDW_WORKLIB)/INCA_libs/bdw_worklib
BDW_LIBREF_ARGS     =   $(addprefix -reflib ,$(BDW_LIBREF))
DEP_FILES			+=	$(BDW_WORKLIB)/wrappers/datapath_wrap.d $(BDW_WORKLIB)/modules/datapath/BASIC/datapath.d $(BDW_WORKLIB)/wrappers/controller_wrap.d $(BDW_WORKLIB)/modules/controller/BASIC/controller.d $(BDW_WORKLIB)/wrappers/memory_map_wrap.d $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map.d $(BDW_WORKLIB)/wrappers/top_wrap.d $(BDW_WORKLIB)/modules/top/BASIC/top.d $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/sc_top.d
SIM_DEP_FILES       = $(BDW_OBJDIR)/top.d $(BDW_OBJDIR)/memory_map.d $(BDW_OBJDIR)/controller.d $(BDW_OBJDIR)/datapath.d 
SIM_RTL_TARGETS		=$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.v $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.v $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.v $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v

BDW_MISSING_WRAPPERS=	
ifeq ($(BDW_VLOG_SIM),)
	BDW_VLOG_SIM	=	ncsc
	BDW_VLOG_SIM_PATH =	$(shell which ncsim)
endif


else

BDW_MISSING_WRAPPERS=	
ifneq ($(BDW_DEP_CYNTH_CONFIG),)
DEP_FILES           =   bdw_work/wrappers/datapath_wrap.d bdw_work/wrappers/controller_wrap.d bdw_work/wrappers/memory_map_wrap.d bdw_work/wrappers/top_wrap.d
endif
endif
endif

################################################################
# List of all dep files outside sim_configs for make all_deps
################################################################
BDW_DEP_FILES = $(BDW_WORKLIB)/wrappers/datapath_wrap.d $(BDW_WORKLIB)/wrappers/controller_wrap.d $(BDW_WORKLIB)/wrappers/memory_map_wrap.d $(BDW_WORKLIB)/wrappers/top_wrap.d $(BDW_WORKLIB)/modules/datapath/BASIC/datapath.d $(BDW_WORKLIB)/modules/controller/BASIC/controller.d $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map.d $(BDW_WORKLIB)/modules/top/BASIC/top.d


################################################################
# start of logicSynth Configurations
################################################################

# global logicSynth definitions


################################################################
# start of analysis Configurations
################################################################

# global analysis definitions


        
# analysisConfig specific definitions


ifeq ($(BDW_SHAREDLIB),0)
	EXECUTABLE			= scsim_$(BDW_SIM_CONFIG)
	
ifeq ($(BDW_DEBUG),1)
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/debug/sim_$(BDW_SIM_CONFIG)
else
SIM_BUILD			= $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_$(BDW_SIM_CONFIG)
endif
else
	EXECUTABLE			= $(BDW_VLOG_SIM)
	COSIM_FILES			= $(SIM_OBJS) $(BDW_LIBPREP) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) $(VLOG_COSIM_TOP)
	SIM_BUILD			= $(COSIM_FILES)
endif


################################################################
# start of place and route configurations
################################################################

# pnrConfig specific definitions 

######################################################################
# Include dependency files for this configuration.
# These will be automatically generted if they do not exist.
# Avoid including (and so generating) these files for 'clean' and
# 'help' commands.
######################################################################
ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
    ifeq ($(findstring clean,$(MAKECMDGOALS)),)
        ifeq ($(findstring help,$(MAKECMDGOALS)),)
            ifneq ($(DEP_FILES),)
                -include $(DEP_FILES)
            endif
            ifneq ($(SIM_DEP_FILES),)
                ifeq ($(BDW_GENDEPS),1)
                    -include $(SIM_DEP_FILES)
                endif
            endif
        endif
    endif
endif

######################################################################
## Include pre-defined variables and rules provided with BDW
######################################################################

include ${STRATUS_HOME}/share/stratus/source/bdw.mak

######################################################################
## Error checking rules for variable and environment settings.
######################################################################
vista_needs_gcc3:
ifeq ($(BDW_GCC_VERSION),2.95.3)
	@echo "*** You must use GCC 3 to use Vista." ;  exit
endif

#########################################################
## Start of the "ALL" rule set
#########################################################

pnr_all:


kill_pnr_all:


clean_pnr_all:


power_all:


kill_power_all:


clean_power_all:


equiv_all:


kill_equiv_all:


clean_equiv_all:


ls_all: ls_RC_BASIC


kill_ls_all: kill_ls_RC_BASIC


clean_ls_all: clean_ls_RC_BASIC


analysis_all:


kill_analysis_all:


clean_analysis_all:


hls_sim_all: hls_B hls_V


cov_all:


kill_cov_all:


clean_cov_all:


hls_all: hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC hls_top_BASIC


hls_datapath_all: hls_datapath_BASIC


hls_controller_all: hls_controller_BASIC


hls_memory_map_all: hls_memory_map_BASIC


hls_top_all: hls_top_BASIC


ifeq ($(CWBExec_hhls),1)
hhls_top_BASIC:  
	$(MAKE) -j1 hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC 
	$(MAKE) -j1 hls_top_BASIC
else
hhls_top_BASIC:
	bdw_exec -jobproject $(BDW_PROJECT_FILE) -job hhls.top.BASIC $(MAKE) CWBExec_hhls=1 hhls_top_BASIC
endif


cynth_all: cynth_B cynth_V


kill_hls_all kill_cynth_all: kill_hls_datapath_BASIC kill_hls_controller_BASIC kill_hls_memory_map_BASIC kill_hls_top_BASIC


gen_all_deps: 
ifneq ($(BDW_DEP_FILES),)
	-@$(MAKE) $(BDW_DEP_FILES)
endif


.PHONY: gen_all_deps
.PHONY: all_deps


all_wrappers : bdw_prebuild_wrappers

bdw_prebuild_wrappers: 
ifneq ($(BDW_ALL_WRAPPERS),)
	@$(MAKE) -j 1 $(BDW_ALL_WRAPPERS)
endif

bdw_prebuild_rtl:
ifneq ($(SIM_RTL_TARGETS),)
ifneq ($(BDW_SPEC_NAME),)
	@$(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(SIM_RTL_TARGETS)`
else
	@$(MAKE) $(SIM_RTL_TARGETS)
endif
endif

.PHONY: bdw_prebuild_sim_objs

bdw_prebuild_sim_objs:
ifneq ($(SIM_OBJS),)
ifneq ($(BDW_SPEC_NAME),)
	@$(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(SIM_OBJS)`
else
	@$(MAKE) $(SIM_OBJS)
endif
endif


clean_hls_all: clean_hls_B clean_hls_V

hls_clean_all: clean_hls_all
cynth_clean_all: clean_hls_all
clean_cynth_all: clean_hls_all
prebuild_all: prebuild_B prebuild_V

build_all: build_B build_V

sim_all: sim_B sim_V

kill_sim_all: kill_sim_B kill_sim_V

clean_wrap_all:
	@rm -fr $(BDW_WORKLIB)/wrappers

clean_spec_%:
	@$(BDW_SPEC_CLEAN) $(*F) -prefix

delete_spec_%:
	@$(BDW_SPEC_DELETE) $(*F) -prefix

kill_all: 
	@bdw_kill -all


clean_cachelib:
	@rm -rf /projects/nd/hjmss/albacore/HLS/stratus/cachelib

clean_all:
	@if [ -d $(BDW_WORKLIB) ] ; then \
		td=`mktemp -d $(BDW_WORKLIB).XXXXXXXX` ; \
		mv $(BDW_WORKLIB) $${td} ; \
		for f in *.vcd *.fsdb ; do \
			if [ -f $$f ] ; then \
				mv $$f $${td} ; \
			fi ; \
		done ; \
		rm -rf $${td} & \
	fi

clean_sim_all: clean_B clean_V clean_deps
	@rm -rf *.vcd *.fsdb $(BDW_OBJDIR) $(BDW_SIMDIR) $(BDW_MODULEDIR) $(BDW_WRAPDIR)

jobs:
	@bdw_ps

clean_libs:
	@rm -rf $(BDW_LIBDIR)

clean_deps:
	@if [ -d $(BDW_WORKLIB) ]; then find $(BDW_WORKLIB) -type f -name '*.d' -exec rm {} \; ; fi

deps : $(DEP_FILES)

#########################################################
## End of the "ALL" rule set
#########################################################



#########################################################
## Start of the "config groups" rule set
#########################################################
        

#########################################################
## End of the "config groups" rule set
#########################################################
        

help:
	@echo 
	@echo "Makefile generated by bdw_makegen version 23.02-s006 from project.tcl"
	@echo 
	@echo "PROJECT-WIDE RULES:"
	@echo "    workbench   - Stratus Workbench for the project."
	@echo "    help-configs - List all configs defined in the project."
	@echo 
	@echo "GROUP RULES:"
	@echo "    hls_all             - Run stratus_hls for all modules for all configurations."
	@echo "    hls_sim_all         - Run stratus_hls for all modules that are RTL_V in a sim_config."
	@echo "    clean_hls_all       - Clear all RTL files generated for all stratus_hls runs for each configuration."
	@echo "    ls_all             - Run logic synthesis for all logic synthesis configs "
	@echo "    clean_ls_all       - Removes logic synthesis results for all logic synthesis configs "
	@echo "    build_all           - Build all simulation executables or shared libraries (but don't run them)."
	@echo "    sim_all             - Build AND run all simulation configurations."
	@echo "    power_all           - Run all Power configurations."
	@echo "    pnr_all             - Run all place and route configurations."
	@echo "    equiv_all           - Run all whole-design equivalence checking configurations."
	@echo "    clean_all           - Removes the $(BDW_WORKLIB) directory, thus cleaning up everything."
	@echo "    clean_sim_all       - Clean up all modules for all simulation configurations."
	@echo "    clean_power_all     - Clean all files generated for all power estimation configs."
	@echo "    clean_pnr_all       - Clean all files generated for all place and route configs."
	@echo "    clean_equiv_all     - Clean all files generated for all equivalence checking configs."
	@echo "    clean_libs          - Clean up all locally built items for hls_libs."
	@echo "    clean_cachelib      - Clean up the local Cache Library."
	@echo "    clean_deps          - Clean up auto-generated dependencies so they will be re-generated."
	@echo "    clean_wrap_all      - Clean all generated wrapper files."
	@echo "    all_deps            - Re-creates all dependencies."
	@echo "    all_wrappers        - Generates all out of date hls_module wrappers."
	@echo "    jobs                - List all current jobs for this project."
	@echo "    kill_all            - Kills alls current jobs for this project."
	@echo "    kill_hls_all        - Kills alls stratus_hls jobs for this project."
	@echo "    kill_ls_all         - Kill all logic synthesis jobs for this project."
	@echo "    kill_sim_all        - Kill all simulation jobs for this project."
	@echo "    kill_pnr_all        - Kill all place and route jobs for this project."
	@echo "    kill_power_all      - Kill all power estimation jobs for this project."
	@echo "    kill_hls_<config_group>_<hls_config>  - Kill all the stratus_hls jobs for a config group"
	@echo "    kill_equiv_all      - Kill all equivalence checking jobs for this project."
	@echo 
	@echo "PER-hls_config RULES:"
	@echo "    hls_<hls_config>   - Run stratus_hls on all modules that have a hls_config with the given name to Verilog"
	@echo "    hhls_<module>_<hls_config>  - Run stratus_hls on the given module and its submodules and hls_config to Verilog"
	@echo "    hls_<config_group>  - Run stratus_hls on the modules in a config group specified by define_config_group command"
	@echo "    clean_<hls_config> - Clean the given hls_config from all modules that have it"
	@echo "    view_<hls_config>  - View schematics for all modules that have a hls_config with the given name"
	@echo "    view_<sim_config>  - View waveforms for the simulation (waveform viewer tool is choosen from project file)"
	@echo 
	@echo "PER-module-and-hls_config RULES:"
	@echo "    hls_<module>_all            - Run stratus_hls on the given module and all its hls_configs to Verilog"
	@echo "    hls_<module>_<hls_config>   - Run stratus_hls on the given module and hls_config to Verilog"
	@echo "    elab_<module>_<hls_config>  - Run stratus_hls through elaboration on the given module and hls_config"
	@echo "    optim_<module>_<hls_config> - Run stratus_hls through optimization on the given module and hls_config"
	@echo "    sched_<module>_<hls_config> - Run stratus_hls through scheduling on the given module and hls_config"
	@echo "    clean_hls_<module>_<hls_config>  - Clean synthesis results for the given module and hls_config"
	@echo "    view_<module>_<hls_config> - View schematic for the given module and hls_config"
	@echo "    kill_hls_<module>_<hls_config> - Kill stratus_hls job for this module and hls_config"
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module datapath:"
	@echo "		BASIC"
	@echo "	hls_config for module controller:"
	@echo "		BASIC"
	@echo "	hls_config for module memory_map:"
	@echo "		BASIC"
	@echo "	hls_config for module top:"
	@echo "		BASIC"
	@echo 
	@echo "PER-sim_config RULES:"
	@echo "    clean_hls_<sim_config> - Clean stratus_hls output files for all modules required by the named sim_config"
	@echo "    build_<sim_config>   - Build the simulation executable for the named sim_config"
	@echo "    sim_<sim_config>     - Builds and executes a simulation for the named sim_config"
	@echo "    kill_sim_<sim_config> - Kills the simulation for the  named sim_config"
	@echo "    debug_<sim_config>   - Builds and executes a simulation for the named sim_config under the SimVision debugger"
	@echo "    view_<sim_config>    - View schematics for all modules required by the named sim_config"
	@echo "    clean_<sim_config>   - Clean up files built for the named sim_config"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V"

	@echo
	@echo "PER-logicSynthConfig Rules:"
	@echo "    ls_<logicSynthConfig> - Run logic synthesis for the modules in this logicSynthConfig"
	@echo "    view_ls_<logicSynthConfig> - View schematics for the modules in this logicSynthConfig"
	@echo "    clean_ls_<logicSynthConfig> - Removes logic synthesis results for this logicSynthConfig"
	@echo "    kill_ls_<logicSynthConfig> - Kills the logic synthesis job for this logicSynthConfig"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	RC_BASIC"

help-configs:
	@echo 
	@echo "DEFINED module and hls_config NAMES:"
	@echo "	hls_config for module datapath:"
	@echo "		BASIC"
	@echo "	hls_config for module controller:"
	@echo "		BASIC"
	@echo "	hls_config for module memory_map:"
	@echo "		BASIC"
	@echo "	hls_config for module top:"
	@echo "		BASIC"
	@echo 
	@echo "DEFINED sim_config NAMES:"

	@echo "	B	V"
	@echo
	@echo "DEFINED logicSynthConfig NAMES:"

	@echo "	RC_BASIC"

#########################################################
# rules for making parent simConfig links
#########################################################
parentLinks:
	$(warning WARNING: $(BDW_SIM_CONFIG) is a child sim_config of $(BDW_PARENT_SIM).)
	$(warning WARNING: Make sure to run 'make prep_$(BDW_PARENT_SIM)' before running any child sim_configs!)
	@if [ ! -d $(BDW_SIM_CONFIG_DIR) ] ; then mkdir -p $(BDW_SIM_CONFIG_DIR) ; fi
	@cd $(BDW_SIM_CONFIG_DIR) ; \
	ln -sf ../$(BDW_PARENT_SIM)/xcelium ; \
	if [ -d ../$(BDW_PARENT_SIM)/xcelium.d ] ; then \
		ln -sf ../$(BDW_PARENT_SIM)/xcelium.d ; \
	fi; \
	ln -sf ../$(BDW_PARENT_SIM)/siminfo




#########################################################
## Start of the rule set for sim_config B
#########################################################



hls_B: 



cynth_B: 

hls_clean_B: clean_hls_B

cynth_clean_B: hls_clean_B

clean_hls_B: 
ifneq (,)
	@$(MAKE)  $(addprefix clean_, )
endif

clean_cynth_B: clean_hls_B

prebuild_B: bdw_prebuild_wrappers 

prep_B: prebuild_B
	@$(MAKE) sim_B BDW_XRUN_ELAB=-elaborate

ifeq ($(CWBExec_build),1)

dbg_build_B:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(MAKE) BDW_DEBUG=1 build_B


build_B build_B_sub: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B BDW_GENDEPS=1 BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=

else
.PHONY: build_B
.PHONY: dbg_build_B

dbg_build_B:
	@bdw_exec -jobproject project.tcl -job dbg_build.B $(MAKE) CWBExec_build=1 dbg_build_B

build_B:
	@bdw_exec -jobproject project.tcl -job build.B $(MAKE) CWBExec_build=1 build_B

build_B_sub:
	@bdw_exec -jobproject project.tcl -job build.B.s $(MAKE) CWBExec_build=1 build_B_sub
endif


ifeq ($(CWBExec_sim),1)
sim_B sim_sub_B: build_B_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=B  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME= 

else
.PHONY: sim_B

sim_B:
	@bdw_exec -jobproject project.tcl -job sim.B $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_B

sim_sub_B:
	@bdw_exec -jobproject project.tcl -job sim_sub.B.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_B
endif


kill_sim_B:
	@bdw_kill -job sim.B
	@bdw_kill -job sim.B.s


catlog_B: 
debug_B: 
	@$(MAKE) BDW_DEBUG=1 build_B
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=B  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME= RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_B:
	@if [ -e $(BDW_WORKLIB)/sims/B/B.shm ]; then \
	bdw_view_waveform -project project.tcl -simconfig B ;\
	else   \
	$(MAKE) sim_B ;\
	bdw_view_waveform -project project.tcl -simconfig B ;\
    fi
else
view_B:
	@bdw_exec -jobproject project.tcl -job view.B $(MAKE) CWBExec_view=1 view_B
endif
    



clean_B: clean_hls_B clean_sim_B

clean_sim_B:
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B
	@rm -rf $(BDW_WORKLIB)/jobs/build.B
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/xcelium/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=



clean_wrap_B:
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/top_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_top.h 
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_datapath.h 
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/controller_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_controller.h 
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_memory_map.h 

hls_B_%: 



cynth_B_%: 

hls_clean_B_%: clean_hls_B_%

cynth_clean_B_%: hls_clean_B_%

clean_hls_B_%: 
ifneq (,)
	@$(MAKE) `$(BDW_SPEC_FILTER) project.db $(*F)  $(addprefix clean_, )`
endif

clean_cynth_B_%: clean_hls_B_%

prebuild_B_%: bdw_prebuild_wrappers 

prep_B_%: prebuild_B_%
	@$(MAKE) sim_B_$(*F) BDW_XRUN_ELAB=-elaborate

ifeq ($(CWBExec_build),1)

dbg_build_B_%:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=B_$(*F)
	@$(MAKE) BDW_DEBUG=1 build_B_$(*F)


build_B_% build_B_sub_%: bdw_prebuild_wrappers 
	@$(MAKE) siminfo BDW_SIM_CONFIG=B_$(*F)
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=B_$(*F) BDW_GENDEPS=1 BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=$(*F)

else
.PHONY: build_B
.PHONY: dbg_build_B

dbg_build_B_%:
	@bdw_exec -jobproject project.tcl -job dbg_build.B_$(*F) $(MAKE) CWBExec_build=1 dbg_build_B_$(*F)

build_B_%:
	@bdw_exec -jobproject project.tcl -job build.B_$(*F) $(MAKE) CWBExec_build=1 build_B_$(*F)

build_B_sub_%:
	@bdw_exec -jobproject project.tcl -job build.B_$(*F).s $(MAKE) CWBExec_build=1 build_B_sub_$(*F)
endif


ifeq ($(CWBExec_sim),1)
sim_B_% sim_sub_B_%: build_B_sub_%
	@$(MAKE) run_sim BDW_SIM_CONFIG=B_$(*F)  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=$(*F) 

else
.PHONY: sim_B_%

sim_B_%:
	@bdw_exec -jobproject project.tcl -job sim.B_$(*F) $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_B_$(*F)

sim_sub_B_%:
	@bdw_exec -jobproject project.tcl -job sim_sub.B_$(*F).s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_B_$(*F)
endif


kill_sim_B_%:
	@bdw_kill -job sim.B_$(*F)
	@bdw_kill -job sim.B_$(*F).s


catlog_B_%: 
debug_B_%: 
	@$(MAKE) BDW_DEBUG=1 build_B_$(*F)
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=B_$(*F)  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=$(*F) RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_B_%:
	@if [ -e $(BDW_WORKLIB)/sims/B/B.shm ]; then \
	bdw_view_waveform -project project.tcl -simconfig B_$(*F) ;\
	else   \
	$(MAKE) sim_B ;\
	bdw_view_waveform -project project.tcl -simconfig B_$(*F) ;\
    fi
else
view_B_%:
	@bdw_exec -jobproject project.tcl -job view.B_$(*F) $(MAKE) CWBExec_view=1 view_B_$(*F)
endif
    



clean_B_%: clean_hls_B_% clean_sim_B_%

clean_sim_B_%:
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B_$(*F).s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.B_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/build.B_$(*F)
	@rm -f 
	@rm -rf $(BDW_WORKLIB)/sims/B $(BDW_WORKLIB)/sims/B/xcelium/sim_B
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=B_$(*F)  BDW_BASE_SIM_CONFIG=B BDW_SPEC_NAME=$(*F)




#########################################################
## Start of the rule set for sim_config V
#########################################################



hls_V:  
	$(MAKE) -j1  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC 
	$(MAKE) -j1  hls_top_BASIC



cynth_V:  
	$(MAKE) -j1  hlsc_datapath_BASIC hlsc_controller_BASIC hlsc_memory_map_BASIC 
	$(MAKE) -j1  hlsc_top_BASIC

hls_clean_V: clean_hls_V

cynth_clean_V: hls_clean_V

clean_hls_V: 
ifneq (hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC hls_top_BASIC,)
	@$(MAKE)  $(addprefix clean_, hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC hls_top_BASIC)
endif

clean_cynth_V: clean_hls_V

prebuild_V: bdw_prebuild_wrappers  
	$(MAKE) -j1  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC 
	$(MAKE) -j1  hls_top_BASIC

prep_V: prebuild_V
	@$(MAKE) sim_V BDW_XRUN_ELAB=-elaborate

ifeq ($(CWBExec_build),1)

dbg_build_V:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V
	@$(MAKE) BDW_DEBUG=1 build_V


build_V build_V_sub: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC 
	$(MAKE) -j1 CWBExec_hls=1  hls_top_BASIC
	@$(MAKE) siminfo BDW_SIM_CONFIG=V
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V BDW_GENDEPS=1 BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=

else
.PHONY: build_V
.PHONY: dbg_build_V

dbg_build_V:
	@bdw_exec -jobproject project.tcl -job dbg_build.V $(MAKE) CWBExec_build=1 dbg_build_V

build_V:
	@bdw_exec -jobproject project.tcl -job build.V $(MAKE) CWBExec_build=1 build_V

build_V_sub:
	@bdw_exec -jobproject project.tcl -job build.V.s $(MAKE) CWBExec_build=1 build_V_sub
endif


ifeq ($(CWBExec_sim),1)
sim_V sim_sub_V: build_V_sub
	@$(MAKE) run_sim BDW_SIM_CONFIG=V  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME= 

else
.PHONY: sim_V

sim_V:
	@bdw_exec -jobproject project.tcl -job sim.V $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V

sim_sub_V:
	@bdw_exec -jobproject project.tcl -job sim_sub.V.s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V
endif


kill_sim_V:
	@bdw_kill -job sim.V
	@bdw_kill -job sim.V.s


catlog_V: catVLGLog_datapath_BASIC catVLGLog_controller_BASIC catVLGLog_memory_map_BASIC catVLGLog_top_BASIC
debug_V: 
	@$(MAKE) BDW_DEBUG=1 build_V
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME= RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_V:
	@if [ -e $(BDW_WORKLIB)/sims/V/V.shm ]; then \
	bdw_view_waveform -project project.tcl -simconfig V ;\
	else   \
	$(MAKE) sim_V ;\
	bdw_view_waveform -project project.tcl -simconfig V ;\
    fi
else
view_V:
	@bdw_exec -jobproject project.tcl -job view.V $(MAKE) CWBExec_view=1 view_V
endif
    



clean_V: clean_hls_V clean_sim_V

clean_sim_V:
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V.s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V
	@rm -rf $(BDW_WORKLIB)/jobs/build.V
	@rm -f $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V $(BDW_WORKLIB)/sims/V/xcelium/sim_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=



clean_wrap_V:
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/top_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/top_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/top_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/top_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_top.h 
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/datapath_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_datapath.h 
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/controller_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/controller_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/controller_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/controller_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_controller.h 
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_wrap.d
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_wrap.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_wrap.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_type_wrapper.cpp
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_type_wrapper.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_vlwrapper.v
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_cosim.h
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_cosim.v
	@rm -f $(BDW_WORKLIB)/wrappers/memory_map_sc_foreign.h
	@rm -f $(BDW_WORKLIB)/wrappers/bdw_scvector_memory_map.h 

hls_V_%:  
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC` 
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_top_BASIC`



cynth_V_%:  
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hlsc_datapath_BASIC hlsc_controller_BASIC hlsc_memory_map_BASIC` 
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hlsc_top_BASIC`

hls_clean_V_%: clean_hls_V_%

cynth_clean_V_%: hls_clean_V_%

clean_hls_V_%: 
ifneq (hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC hls_top_BASIC,)
	@$(MAKE) `$(BDW_SPEC_FILTER) project.db $(*F)  $(addprefix clean_, hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC hls_top_BASIC)`
endif

clean_cynth_V_%: clean_hls_V_%

prebuild_V_%: bdw_prebuild_wrappers  
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC` 
	$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_top_BASIC`

prep_V_%: prebuild_V_%
	@$(MAKE) sim_V_$(*F) BDW_XRUN_ELAB=-elaborate

ifeq ($(CWBExec_build),1)

dbg_build_V_%:
	@if [ ! -e systemc ] ; then ln -s $(STRATUS_HOME)/tools.lnx86/stratus/systemc ; fi
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_$(*F)
	@$(MAKE) BDW_DEBUG=1 build_V_$(*F)


build_V_% build_V_sub_%: bdw_prebuild_wrappers  
	$(MAKE) -j1 CWBExec_hls=1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC` 
	$(MAKE) -j1 CWBExec_hls=1 `$(BDW_SPEC_FILTER) project.db $(*F)  hls_top_BASIC`
	@$(MAKE) siminfo BDW_SIM_CONFIG=V_$(*F)
	@$(BDW_EXEC_CMD) $(MAKE) $(BDW_PMAKE_FLG) build_sim_image BDW_SIM_CONFIG=V_$(*F) BDW_GENDEPS=1 BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=$(*F)

else
.PHONY: build_V
.PHONY: dbg_build_V

dbg_build_V_%:
	@bdw_exec -jobproject project.tcl -job dbg_build.V_$(*F) $(MAKE) CWBExec_build=1 dbg_build_V_$(*F)

build_V_%:
	@bdw_exec -jobproject project.tcl -job build.V_$(*F) $(MAKE) CWBExec_build=1 build_V_$(*F)

build_V_sub_%:
	@bdw_exec -jobproject project.tcl -job build.V_$(*F).s $(MAKE) CWBExec_build=1 build_V_sub_$(*F)
endif


ifeq ($(CWBExec_sim),1)
sim_V_% sim_sub_V_%: build_V_sub_%
	@$(MAKE) run_sim BDW_SIM_CONFIG=V_$(*F)  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=$(*F) 

else
.PHONY: sim_V_%

sim_V_%:
	@bdw_exec -jobproject project.tcl -job sim.V_$(*F) $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_V_$(*F)

sim_sub_V_%:
	@bdw_exec -jobproject project.tcl -job sim_sub.V_$(*F).s $(BDW_LAUNCH_SIM_COMMAND) $(MAKE) CWBExec_sim=1 sim_sub_V_$(*F)
endif


kill_sim_V_%:
	@bdw_kill -job sim.V_$(*F)
	@bdw_kill -job sim.V_$(*F).s


catlog_V_%: catVLGLog_datapath_BASIC catVLGLog_controller_BASIC catVLGLog_memory_map_BASIC catVLGLog_top_BASIC
debug_V_%: 
	@$(MAKE) BDW_DEBUG=1 build_V_$(*F)
	@$(MAKE) run_sim BDW_DEBUG=1 BDW_SIM_CONFIG=V_$(*F)  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=$(*F) RUN_DEBUGGER=1
    
ifeq ($(CWBExec_view),1)
view_V_%:
	@if [ -e $(BDW_WORKLIB)/sims/V/V.shm ]; then \
	bdw_view_waveform -project project.tcl -simconfig V_$(*F) ;\
	else   \
	$(MAKE) sim_V ;\
	bdw_view_waveform -project project.tcl -simconfig V_$(*F) ;\
    fi
else
view_V_%:
	@bdw_exec -jobproject project.tcl -job view.V_$(*F) $(MAKE) CWBExec_view=1 view_V_$(*F)
endif
    



clean_V_%: clean_hls_V_% clean_sim_V_%

clean_sim_V_%:
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_$(*F).s
	@rm -rf $(BDW_WORKLIB)/jobs/sim.V_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/build.V_$(*F)
	@rm -f $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o
	@rm -rf $(BDW_WORKLIB)/sims/V $(BDW_WORKLIB)/sims/V/xcelium/sim_V.so
	@$(MAKE) clean_sim_objs BDW_SIM_CONFIG=V_$(*F)  BDW_BASE_SIM_CONFIG=V BDW_SPEC_NAME=$(*F)



$(BDW_WORKLIB)/sims/top1_V.v: top_v.bdt $(BDW_LOGOPTIONS_FILE)  $(BDW_VLOG_DUT_FILES)
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -simconfig V -top top1


#############################################################################
# libesc building rules
#############################################################################

ifeq ($(BDW_DEBUG),1)
libesc_WORKDIR = $(BDW_WORKLIB)/libesc/xcelium/debug
else
libesc_WORKDIR = $(BDW_WORKLIB)/libesc/xcelium
endif

BDW_ESC_SOURCES = libesc.o esc_elab.o esc_cleanup.o
BDW_ESC_OBJS = $(addprefix $(libesc_WORKDIR)/, $(BDW_ESC_SOURCES))

$(libesc_WORKDIR)/libesc.a : $(BDW_ESC_OBJS)
	$(BDW_AR) $(libesc_WORKDIR)/libesc.a $(BDW_ESC_OBJS)

${libesc_WORKDIR}/%.o   :   ${STRATUS_HOME}/share/stratus/source/%.cc 
	@if [ ! -d ${libesc_WORKDIR} ]; then mkdir -p ${libesc_WORKDIR}; fi
ifeq ($(BDW_NCSC),1)
	${BDW_CC} " ${BDW_CCFLAGS} ${BDW_COUT}$@ " $<
else
	${BDW_CC} ${BDW_CCFLAGS} ${BDW_COUT}$@ $<
endif



########################################################################
# Rules to prep all libraries
#######################################################################
prep_c_all: $(BDW_C_LIBPREP)

prep_vlog_all: $(BDW_VLOG_LIBPREP)


##############################################################
## Rule for building all Cynth libraries external to the project
##############################################################

build_all_cynthLibs: $(BDW_BOTH_LIBPREP_EXTERNAL)

list_cynthLibs:


##############################################################
## START OF HLS MODULE RULES
##############################################################



##############################################################
## HLS Module "datapath"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/datapath.d :  ../src/datapath.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../src/datapath.cpp \
	| sed 's|datapath\.o[ :]*|$(BDW_OBJDIR)/datapath.o $(BDW_OBJDIR)/datapath.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/datapath_trace.h : $(BDW_WORKLIB)/wrappers/datapath_trace.h.updated

$(BDW_WORKLIB)/wrappers/datapath_trace.h.updated :  ../src/datapath.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module datapath  
	@touch $(BDW_WORKLIB)/wrappers/datapath_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/datapath.o:  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/datapath.o:  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

.INTERMEDIATE : datapath_wrap.h

datapath_wrap.h : $(BDW_WORKLIB)/wrappers/datapath_wrap.h

$(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_cosim.v   : $(BDW_WRAPDIR)/datapath.updated

$(BDW_WRAPDIR)/datapath.updated :  ../src/datapath.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module datapath "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/datapath.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module datapath  
	@touch $(BDW_WORKLIB)/wrappers/datapath_trace.h.updated
$(BDW_WORKLIB)/wrappers/datapath_wrap.d :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../src/datapath.cpp \
		| sed 's|datapath\.o[ :]*|$(BDW_WRAPDIR)/datapath.updated $(BDW_WORKLIB)/wrappers/datapath_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/datapath_wrap.d 




##############################################################
## HLS Module "datapath" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_datapath_BASIC = 
LIB_INCLUDES_datapath_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_datapath_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_datapath_BASIC = 
LIB_NAMES_FOR_VLOG_datapath_BASIC = 
PREFIXED_LIB_NAMES_datapath_BASIC = 
EXTRACT_LIB_DASHI_datapath_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl datapath BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_datapath_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/datapath/BASIC/c_parts -DBASIC=1 -DBDW_RTL_datapath_BASIC=1   $(LIB_INCLUDES_datapath_BASIC)
CCFLAGS_COSIM_datapath_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/datapath/BASIC/c_parts -DBASIC=1 -DBDW_RTL_datapath_BASIC=1   $(LIB_INCLUDES_datapath_BASIC)
CCFLAGS_BEH_datapath_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/datapath/BASIC/c_parts -DBASIC=1   $(LIB_INCLUDES_datapath_BASIC)
CCFLAGS_datapath_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_datapath_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_datapath_BASIC += ${BDW_CCFLAGS_TAIL}

hls_datapath_BASIC : hlsc_datapath_BASIC

cynth_datapath_BASIC : hlsc_datapath_BASIC

elab_datapath_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr

optim_datapath_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr

sched_datapath_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr

.PHONY: hlsc_datapath_BASIC hls_datapath_BASIC

hlsc_datapath_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=datapath BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.datapath.BASIC $(MAKE) CWBExec_hls=1 hlsc_datapath_BASIC
endif

clean_cynth_datapath_BASIC: clean_hls_datapath_BASIC

clean_datapath_BASIC: clean_hls_datapath_BASIC

clean_hls_datapath_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/datapath/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.datapath.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.datapath.BASIC.s

kill_hls_datapath_BASIC:
	@bdw_kill -job hls.datapath.BASIC
	@bdw_kill -job hls.datapath.BASIC.s


hls_datapath_BASIC_% : hlsc_datapath_BASIC_%

cynth_datapath_BASIC_% : hlsc_datapath_BASIC_%

elab_datapath_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr)

optim_datapath_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr)

sched_datapath_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr)

.PHONY: hlsc_datapath_BASIC_% hls_datapath_BASIC_%

hlsc_datapath_BASIC_% hls_datapath_BASIC_% : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp) BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=datapath BDW_HLS_CONFIG=BASIC_$(*F)
else
	@bdw_exec -jobproject project.tcl -job hls.datapath.BASIC_$(*F) $(MAKE) CWBExec_hls=1 hlsc_datapath_BASIC_$(*F)
endif

clean_cynth_datapath_BASIC_%: clean_hls_datapath_BASIC_%

clean_datapath_BASIC_%: clean_hls_datapath_BASIC_%

clean_hls_datapath_BASIC_%:
	@rm -rf $(BDW_WORKLIB)/modules/datapath/BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.datapath.BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.datapath.BASIC_$(*F).s

kill_hls_datapath_BASIC_%:
	@bdw_kill -job hls.datapath.BASIC_$(*F)
	@bdw_kill -job hls.datapath.BASIC_$(*F).s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/datapath/BASIC/datapath.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_datapath_BASIC :
	bdw_htmlgen -project project.tcl -module datapath -cynthconfig BASIC

BDW_datapath_BASIC_HLS_TARGETS = $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.v $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr
BDW_datapath_BASIC_HLS_SPEC_TARGETS = $(subst /BASIC/,/BASIC_%/,$(BDW_datapath_BASIC_HLS_TARGETS))




ifeq ($(CWBExec_hlsc),1)

$(BDW_datapath_BASIC_HLS_TARGETS) :  ../src/datapath.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/datapath/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/datapath/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp \
		BDW_MODULE=datapath \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/datapath/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/datapath/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_datapath_BASIC) \
		-d $(BDW_WORKLIB)/modules/datapath/BASIC -o datapath_rtl.cpp \
		--hls_module=datapath --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_datapath_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_datapath_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_datapath_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_datapath_BASIC) \
		 ../src/datapath.cpp
	
	
	
	

else

$(BDW_datapath_BASIC_HLS_TARGETS) :  ../src/datapath.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.datapath.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_datapath_BASIC_HLS_TARGETS)

endif

	
$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h : $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h.updated

$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h.updated : $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module datapath -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h.updated

ifeq ($(CWBExec_hlsc),1)

$(BDW_datapath_BASIC_HLS_SPEC_TARGETS) :  ../src/datapath.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/datapath/BASIC_$(*F) ]; then mkdir -p $(BDW_WORKLIB)/modules/datapath/BASIC_$(*F); fi
	
	$(subst /BASIC ,/BASIC_$(*F) ,$(subst =BASIC ,=BASIC_$(*F) ,$(subst /datapath/BASIC/,/datapath/BASIC_$(*F)/,$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp \
		BDW_MODULE=datapath \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/datapath/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/datapath/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_datapath_BASIC) \
		`cat  $(BDW_SPECLIB)/datapath/BASIC.$(*F).bds | grep '^cmdline:' | sed 's/^cmdline://'`\
		-d $(BDW_WORKLIB)/modules/datapath/BASIC -o datapath_rtl.cpp \
		--hls_module=datapath --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_datapath_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_datapath_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_datapath_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_datapath_BASIC) \
		 ../src/datapath.cpp)))
	
	
	
	

else

$(BDW_datapath_BASIC_HLS_SPEC_TARGETS) :  ../src/datapath.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.datapath.BASIC_$(*F).s $(MAKE) -j1 CWBExec_hlsc=1 $(subst %,$(*F),$(BDW_datapath_BASIC_HLS_SPEC_TARGETS))

endif

	

$(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h) : $(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp) $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module datapath -cynthconfig BASIC_$(*F)  

catHLLog_datapath_BASIC:
	cat $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_datapath_BASIC : hls_datapath_BASIC 


.PHONY: hls_datapath_BASIC

hls_datapath_BASIC hlsv_datapath_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_datapath_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_datapath_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.datapath.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_datapath_BASIC
endif

.PHONY: hls_datapath_BASIC

hls_datapath_BASIC_% hlsv_datapath_BASIC_%: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_datapath_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_datapath_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.datapath.BASIC_$(*F) $(MAKE) CWBExec_hlsv=1 hlsv_datapath_BASIC_$(*F)
endif

catVLGLog_datapath_BASIC : catHLLog_datapath_BASIC
	cat $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_vlg.log

#
#	view rule
#

view_datapath_BASIC:
	@echo "ERROR: Schematic viewing target 'view_datapath_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o : $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl datapath`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC/ -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_rtl.o : $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl datapath`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC/ -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_rtl.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_beh.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_BEH_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_beh.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_beh.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_BEH_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_beh.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_COSIM_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp
    

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_hoist.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_hoist.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp
    

$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_COSIM_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp


$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_hoist.o :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(BDW_WORKLIB)/wrappers/datapath_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_hoist.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp
    

view_datapath_BASIC_%:
	@echo "ERROR: Schematic viewing target 'view_datapath_BASIC_$(*F)' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

ifneq ($(BDW_SPEC_NAME),)
#
#	RTL object file rule
#
$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp) $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl datapath`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC/ -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_rtl.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp) $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl datapath`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC/ -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_rtl.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_beh.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_BEH_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_beh.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_beh.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_BEH_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_beh.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)

#
# Cosim object file rule
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_COSIM_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_hoist.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_hoist.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_COSIM_datapath_BASIC) -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)


$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_hoist.o) :  ../src/datapath.cpp $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp $(BDW_WORKLIB)/wrappers/datapath_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/datapath_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/datapath/BASIC -I./ $(CCFLAGS_datapath_BASIC) $(EXTRACT_LIB_DASHI_datapath_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_hoist.o " $(BDW_WORKLIB)/wrappers/datapath_wrap.cpp)
    
endif

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/datapath/BASIC/datapath.d :  ../src/datapath.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_datapath_BASIC)  ../src/datapath.cpp \
	| sed 's|datapath\.o[ :]*|$(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/datapath_beh.o $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium/debug/datapath_beh.o $(BDW_WORKLIB)/modules/datapath/BASIC/datapath.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/datapath/BASIC"
##############################################################

datapath_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/datapath/BASIC
datapath_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/datapath_BASIC
datapath_BASIC_LIBNAME = datapath_BASIC
datapath_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/datapath/BASIC/xcelium
datapath_BASIC_C_PARTS_A = $(datapath_BASIC_WORKLIB)/objs/libdatapath_BASIC.a

prep_c_datapath_BASIC : $(datapath_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB) prep_c

prep_c_datapath_BASIC_% : $(datapath_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB)_$(*F) prep_c

prep_vlog_datapath_BASIC : $(datapath_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB) prep_vlog

prep_vlog_datapath_BASIC_% : $(datapath_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB)_$(*F) prep_vlog

prep_datapath_BASIC : $(datapath_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB) prep

prep_datapath_BASIC_% : $(datapath_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(datapath_BASIC_WORKLIB)_$(*F) prep

$(datapath_BASIC_WORKLIB)/Makefile : $(datapath_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(datapath_BASIC_WORKLIB) ]; then mkdir -p $(datapath_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(datapath_BASIC_SRCDIR) -o $(datapath_BASIC_WORKLIB)/Makefile -module datapath -cynthconfig BASIC   

$(datapath_BASIC_WORKLIB)_%/Makefile : $(datapath_BASIC_SRCDIR)_%/stratus_hls.bdl
	@if [ ! -d $(datapath_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(datapath_BASIC_WORKLIB)_$(*F); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(datapath_BASIC_SRCDIR)_$(*F) -o $(datapath_BASIC_WORKLIB)_$(*F)/Makefile -module datapath -cynthconfig BASIC_$(*F)   

$(datapath_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(datapath_BASIC_WORKLIB) ]; then mkdir -p $(datapath_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi

$(datapath_BASIC_SRCDIR)_%/stratus_hls.bdl :
	@if [ ! -d $(datapath_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(datapath_BASIC_WORKLIB)_$(*F); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(datapath_BASIC_WORKLIB)/datapath_BASIC.d :
	@if [ ! -d $(datapath_BASIC_WORKLIB) ]; then mkdir -p $(datapath_BASIC_WORKLIB); fi
	@touch $(datapath_BASIC_WORKLIB)/datapath_BASIC.d



##############################################################
## HLS Module "controller"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/controller.d :  ../src/controller.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../src/controller.cpp \
	| sed 's|controller\.o[ :]*|$(BDW_OBJDIR)/controller.o $(BDW_OBJDIR)/controller.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/controller_trace.h : $(BDW_WORKLIB)/wrappers/controller_trace.h.updated

$(BDW_WORKLIB)/wrappers/controller_trace.h.updated :  ../src/controller.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module controller  
	@touch $(BDW_WORKLIB)/wrappers/controller_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/controller.o:  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/controller.o:  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

.INTERMEDIATE : controller_wrap.h

controller_wrap.h : $(BDW_WORKLIB)/wrappers/controller_wrap.h

$(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_cosim.v   : $(BDW_WRAPDIR)/controller.updated

$(BDW_WRAPDIR)/controller.updated :  ../src/controller.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module controller "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/controller.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module controller  
	@touch $(BDW_WORKLIB)/wrappers/controller_trace.h.updated
$(BDW_WORKLIB)/wrappers/controller_wrap.d :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../src/controller.cpp \
		| sed 's|controller\.o[ :]*|$(BDW_WRAPDIR)/controller.updated $(BDW_WORKLIB)/wrappers/controller_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/controller_wrap.d 




##############################################################
## HLS Module "controller" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_controller_BASIC = 
LIB_INCLUDES_controller_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_controller_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_controller_BASIC = 
LIB_NAMES_FOR_VLOG_controller_BASIC = 
PREFIXED_LIB_NAMES_controller_BASIC = 
EXTRACT_LIB_DASHI_controller_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl controller BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_controller_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/controller/BASIC/c_parts -DBASIC=1 -DBDW_RTL_controller_BASIC=1   $(LIB_INCLUDES_controller_BASIC)
CCFLAGS_COSIM_controller_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/controller/BASIC/c_parts -DBASIC=1 -DBDW_RTL_controller_BASIC=1   $(LIB_INCLUDES_controller_BASIC)
CCFLAGS_BEH_controller_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/controller/BASIC/c_parts -DBASIC=1   $(LIB_INCLUDES_controller_BASIC)
CCFLAGS_controller_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_controller_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_controller_BASIC += ${BDW_CCFLAGS_TAIL}

hls_controller_BASIC : hlsc_controller_BASIC

cynth_controller_BASIC : hlsc_controller_BASIC

elab_controller_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr

optim_controller_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr

sched_controller_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr

.PHONY: hlsc_controller_BASIC hls_controller_BASIC

hlsc_controller_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=controller BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.controller.BASIC $(MAKE) CWBExec_hls=1 hlsc_controller_BASIC
endif

clean_cynth_controller_BASIC: clean_hls_controller_BASIC

clean_controller_BASIC: clean_hls_controller_BASIC

clean_hls_controller_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/controller/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.controller.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.controller.BASIC.s

kill_hls_controller_BASIC:
	@bdw_kill -job hls.controller.BASIC
	@bdw_kill -job hls.controller.BASIC.s


hls_controller_BASIC_% : hlsc_controller_BASIC_%

cynth_controller_BASIC_% : hlsc_controller_BASIC_%

elab_controller_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr)

optim_controller_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr)

sched_controller_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr)

.PHONY: hlsc_controller_BASIC_% hls_controller_BASIC_%

hlsc_controller_BASIC_% hls_controller_BASIC_% : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp) BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=controller BDW_HLS_CONFIG=BASIC_$(*F)
else
	@bdw_exec -jobproject project.tcl -job hls.controller.BASIC_$(*F) $(MAKE) CWBExec_hls=1 hlsc_controller_BASIC_$(*F)
endif

clean_cynth_controller_BASIC_%: clean_hls_controller_BASIC_%

clean_controller_BASIC_%: clean_hls_controller_BASIC_%

clean_hls_controller_BASIC_%:
	@rm -rf $(BDW_WORKLIB)/modules/controller/BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.controller.BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.controller.BASIC_$(*F).s

kill_hls_controller_BASIC_%:
	@bdw_kill -job hls.controller.BASIC_$(*F)
	@bdw_kill -job hls.controller.BASIC_$(*F).s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/controller/BASIC/controller.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_controller_BASIC :
	bdw_htmlgen -project project.tcl -module controller -cynthconfig BASIC

BDW_controller_BASIC_HLS_TARGETS = $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.v $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr
BDW_controller_BASIC_HLS_SPEC_TARGETS = $(subst /BASIC/,/BASIC_%/,$(BDW_controller_BASIC_HLS_TARGETS))




ifeq ($(CWBExec_hlsc),1)

$(BDW_controller_BASIC_HLS_TARGETS) :  ../src/controller.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/controller/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/controller/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp \
		BDW_MODULE=controller \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/controller/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/controller/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_controller_BASIC) \
		-d $(BDW_WORKLIB)/modules/controller/BASIC -o controller_rtl.cpp \
		--hls_module=controller --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_controller_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_controller_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_controller_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_controller_BASIC) \
		 ../src/controller.cpp
	
	
	
	

else

$(BDW_controller_BASIC_HLS_TARGETS) :  ../src/controller.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.controller.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_controller_BASIC_HLS_TARGETS)

endif

	
$(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h : $(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h.updated

$(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h.updated : $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module controller -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h.updated

ifeq ($(CWBExec_hlsc),1)

$(BDW_controller_BASIC_HLS_SPEC_TARGETS) :  ../src/controller.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/controller/BASIC_$(*F) ]; then mkdir -p $(BDW_WORKLIB)/modules/controller/BASIC_$(*F); fi
	
	$(subst /BASIC ,/BASIC_$(*F) ,$(subst =BASIC ,=BASIC_$(*F) ,$(subst /controller/BASIC/,/controller/BASIC_$(*F)/,$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp \
		BDW_MODULE=controller \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/controller/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/controller/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_controller_BASIC) \
		`cat  $(BDW_SPECLIB)/controller/BASIC.$(*F).bds | grep '^cmdline:' | sed 's/^cmdline://'`\
		-d $(BDW_WORKLIB)/modules/controller/BASIC -o controller_rtl.cpp \
		--hls_module=controller --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_controller_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_controller_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_controller_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_controller_BASIC) \
		 ../src/controller.cpp)))
	
	
	
	

else

$(BDW_controller_BASIC_HLS_SPEC_TARGETS) :  ../src/controller.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.controller.BASIC_$(*F).s $(MAKE) -j1 CWBExec_hlsc=1 $(subst %,$(*F),$(BDW_controller_BASIC_HLS_SPEC_TARGETS))

endif

	

$(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h) : $(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp) $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module controller -cynthconfig BASIC_$(*F)  

catHLLog_controller_BASIC:
	cat $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_controller_BASIC : hls_controller_BASIC 


.PHONY: hls_controller_BASIC

hls_controller_BASIC hlsv_controller_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_controller_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_controller_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.controller.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_controller_BASIC
endif

.PHONY: hls_controller_BASIC

hls_controller_BASIC_% hlsv_controller_BASIC_%: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_controller_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_controller_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.controller.BASIC_$(*F) $(MAKE) CWBExec_hlsv=1 hlsv_controller_BASIC_$(*F)
endif

catVLGLog_controller_BASIC : catHLLog_controller_BASIC
	cat $(BDW_WORKLIB)/modules/controller/BASIC/stratus_vlg.log

#
#	view rule
#

view_controller_BASIC:
	@echo "ERROR: Schematic viewing target 'view_controller_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o : $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/controller_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl controller`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC/ -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_rtl.o : $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/controller_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl controller`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC/ -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_rtl.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_beh.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_BEH_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_beh.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_beh.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_BEH_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_beh.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_COSIM_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp
    

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_hoist.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_hoist.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp
    

$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_COSIM_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp


$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_hoist.o :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(BDW_WORKLIB)/wrappers/controller_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_hoist.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp
    

view_controller_BASIC_%:
	@echo "ERROR: Schematic viewing target 'view_controller_BASIC_$(*F)' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

ifneq ($(BDW_SPEC_NAME),)
#
#	RTL object file rule
#
$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp) $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/controller_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl controller`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC/ -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_rtl.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp) $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/controller_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/controller_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl controller`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC/ -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_rtl.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_beh.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_BEH_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_beh.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_beh.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_BEH_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_beh.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)

#
# Cosim object file rule
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_COSIM_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_hoist.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_hoist.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_COSIM_controller_BASIC) -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)


$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_hoist.o) :  ../src/controller.cpp $(BDW_WORKLIB)/wrappers/controller_wrap.cpp $(BDW_WORKLIB)/wrappers/controller_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/controller_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/controller/BASIC -I./ $(CCFLAGS_controller_BASIC) $(EXTRACT_LIB_DASHI_controller_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_hoist.o " $(BDW_WORKLIB)/wrappers/controller_wrap.cpp)
    
endif

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/controller/BASIC/controller.d :  ../src/controller.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_controller_BASIC)  ../src/controller.cpp \
	| sed 's|controller\.o[ :]*|$(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/controller_beh.o $(BDW_WORKLIB)/modules/controller/BASIC/xcelium/debug/controller_beh.o $(BDW_WORKLIB)/modules/controller/BASIC/controller.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/controller/BASIC"
##############################################################

controller_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/controller/BASIC
controller_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/controller_BASIC
controller_BASIC_LIBNAME = controller_BASIC
controller_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/controller/BASIC/xcelium
controller_BASIC_C_PARTS_A = $(controller_BASIC_WORKLIB)/objs/libcontroller_BASIC.a

prep_c_controller_BASIC : $(controller_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB) prep_c

prep_c_controller_BASIC_% : $(controller_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB)_$(*F) prep_c

prep_vlog_controller_BASIC : $(controller_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB) prep_vlog

prep_vlog_controller_BASIC_% : $(controller_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB)_$(*F) prep_vlog

prep_controller_BASIC : $(controller_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB) prep

prep_controller_BASIC_% : $(controller_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(controller_BASIC_WORKLIB)_$(*F) prep

$(controller_BASIC_WORKLIB)/Makefile : $(controller_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(controller_BASIC_WORKLIB) ]; then mkdir -p $(controller_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(controller_BASIC_SRCDIR) -o $(controller_BASIC_WORKLIB)/Makefile -module controller -cynthconfig BASIC   

$(controller_BASIC_WORKLIB)_%/Makefile : $(controller_BASIC_SRCDIR)_%/stratus_hls.bdl
	@if [ ! -d $(controller_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(controller_BASIC_WORKLIB)_$(*F); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(controller_BASIC_SRCDIR)_$(*F) -o $(controller_BASIC_WORKLIB)_$(*F)/Makefile -module controller -cynthconfig BASIC_$(*F)   

$(controller_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(controller_BASIC_WORKLIB) ]; then mkdir -p $(controller_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi

$(controller_BASIC_SRCDIR)_%/stratus_hls.bdl :
	@if [ ! -d $(controller_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(controller_BASIC_WORKLIB)_$(*F); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(controller_BASIC_WORKLIB)/controller_BASIC.d :
	@if [ ! -d $(controller_BASIC_WORKLIB) ]; then mkdir -p $(controller_BASIC_WORKLIB); fi
	@touch $(controller_BASIC_WORKLIB)/controller_BASIC.d



##############################################################
## HLS Module "memory_map"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/memory_map.d :  ../src/memory_map.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../src/memory_map.cpp \
	| sed 's|memory_map\.o[ :]*|$(BDW_OBJDIR)/memory_map.o $(BDW_OBJDIR)/memory_map.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/memory_map_trace.h : $(BDW_WORKLIB)/wrappers/memory_map_trace.h.updated

$(BDW_WORKLIB)/wrappers/memory_map_trace.h.updated :  ../src/memory_map.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module memory_map  
	@touch $(BDW_WORKLIB)/wrappers/memory_map_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/memory_map.o:  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/memory_map.o:  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

.INTERMEDIATE : memory_map_wrap.h

memory_map_wrap.h : $(BDW_WORKLIB)/wrappers/memory_map_wrap.h

$(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.v   : $(BDW_WRAPDIR)/memory_map.updated

$(BDW_WRAPDIR)/memory_map.updated :  ../src/memory_map.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module memory_map "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/memory_map.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module memory_map  
	@touch $(BDW_WORKLIB)/wrappers/memory_map_trace.h.updated
$(BDW_WORKLIB)/wrappers/memory_map_wrap.d :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../src/memory_map.cpp \
		| sed 's|memory_map\.o[ :]*|$(BDW_WRAPDIR)/memory_map.updated $(BDW_WORKLIB)/wrappers/memory_map_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/memory_map_wrap.d 




##############################################################
## HLS Module "memory_map" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_memory_map_BASIC = 
LIB_INCLUDES_memory_map_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_memory_map_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_memory_map_BASIC = 
LIB_NAMES_FOR_VLOG_memory_map_BASIC = 
PREFIXED_LIB_NAMES_memory_map_BASIC = 
EXTRACT_LIB_DASHI_memory_map_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl memory_map BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_memory_map_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/memory_map/BASIC/c_parts -DBASIC=1 -DBDW_RTL_memory_map_BASIC=1   $(LIB_INCLUDES_memory_map_BASIC)
CCFLAGS_COSIM_memory_map_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/memory_map/BASIC/c_parts -DBASIC=1 -DBDW_RTL_memory_map_BASIC=1   $(LIB_INCLUDES_memory_map_BASIC)
CCFLAGS_BEH_memory_map_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/memory_map/BASIC/c_parts -DBASIC=1   $(LIB_INCLUDES_memory_map_BASIC)
CCFLAGS_memory_map_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_memory_map_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_memory_map_BASIC += ${BDW_CCFLAGS_TAIL}

hls_memory_map_BASIC : hlsc_memory_map_BASIC

cynth_memory_map_BASIC : hlsc_memory_map_BASIC

elab_memory_map_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr

optim_memory_map_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr

sched_memory_map_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr

.PHONY: hlsc_memory_map_BASIC hls_memory_map_BASIC

hlsc_memory_map_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=memory_map BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.memory_map.BASIC $(MAKE) CWBExec_hls=1 hlsc_memory_map_BASIC
endif

clean_cynth_memory_map_BASIC: clean_hls_memory_map_BASIC

clean_memory_map_BASIC: clean_hls_memory_map_BASIC

clean_hls_memory_map_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/memory_map/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.memory_map.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.memory_map.BASIC.s

kill_hls_memory_map_BASIC:
	@bdw_kill -job hls.memory_map.BASIC
	@bdw_kill -job hls.memory_map.BASIC.s


hls_memory_map_BASIC_% : hlsc_memory_map_BASIC_%

cynth_memory_map_BASIC_% : hlsc_memory_map_BASIC_%

elab_memory_map_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr)

optim_memory_map_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr)

sched_memory_map_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr)

.PHONY: hlsc_memory_map_BASIC_% hls_memory_map_BASIC_%

hlsc_memory_map_BASIC_% hls_memory_map_BASIC_% : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp) BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=memory_map BDW_HLS_CONFIG=BASIC_$(*F)
else
	@bdw_exec -jobproject project.tcl -job hls.memory_map.BASIC_$(*F) $(MAKE) CWBExec_hls=1 hlsc_memory_map_BASIC_$(*F)
endif

clean_cynth_memory_map_BASIC_%: clean_hls_memory_map_BASIC_%

clean_memory_map_BASIC_%: clean_hls_memory_map_BASIC_%

clean_hls_memory_map_BASIC_%:
	@rm -rf $(BDW_WORKLIB)/modules/memory_map/BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.memory_map.BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.memory_map.BASIC_$(*F).s

kill_hls_memory_map_BASIC_%:
	@bdw_kill -job hls.memory_map.BASIC_$(*F)
	@bdw_kill -job hls.memory_map.BASIC_$(*F).s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_memory_map_BASIC :
	bdw_htmlgen -project project.tcl -module memory_map -cynthconfig BASIC

BDW_memory_map_BASIC_HLS_TARGETS = $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.v $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr
BDW_memory_map_BASIC_HLS_SPEC_TARGETS = $(subst /BASIC/,/BASIC_%/,$(BDW_memory_map_BASIC_HLS_TARGETS))




ifeq ($(CWBExec_hlsc),1)

$(BDW_memory_map_BASIC_HLS_TARGETS) :  ../src/memory_map.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/memory_map/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/memory_map/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp \
		BDW_MODULE=memory_map \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/memory_map/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/memory_map/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_memory_map_BASIC) \
		-d $(BDW_WORKLIB)/modules/memory_map/BASIC -o memory_map_rtl.cpp \
		--hls_module=memory_map --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_memory_map_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_memory_map_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_memory_map_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_memory_map_BASIC) \
		 ../src/memory_map.cpp
	
	
	
	

else

$(BDW_memory_map_BASIC_HLS_TARGETS) :  ../src/memory_map.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.memory_map.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_memory_map_BASIC_HLS_TARGETS)

endif

	
$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h : $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h.updated

$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h.updated : $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module memory_map -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h.updated

ifeq ($(CWBExec_hlsc),1)

$(BDW_memory_map_BASIC_HLS_SPEC_TARGETS) :  ../src/memory_map.cpp  $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/memory_map/BASIC_$(*F) ]; then mkdir -p $(BDW_WORKLIB)/modules/memory_map/BASIC_$(*F); fi
	
	$(subst /BASIC ,/BASIC_$(*F) ,$(subst =BASIC ,=BASIC_$(*F) ,$(subst /memory_map/BASIC/,/memory_map/BASIC_$(*F)/,$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp \
		BDW_MODULE=memory_map \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/memory_map/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/memory_map/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_memory_map_BASIC) \
		`cat  $(BDW_SPECLIB)/memory_map/BASIC.$(*F).bds | grep '^cmdline:' | sed 's/^cmdline://'`\
		-d $(BDW_WORKLIB)/modules/memory_map/BASIC -o memory_map_rtl.cpp \
		--hls_module=memory_map --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_memory_map_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_memory_map_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_memory_map_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_memory_map_BASIC) \
		 ../src/memory_map.cpp)))
	
	
	
	

else

$(BDW_memory_map_BASIC_HLS_SPEC_TARGETS) :  ../src/memory_map.cpp  $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.memory_map.BASIC_$(*F).s $(MAKE) -j1 CWBExec_hlsc=1 $(subst %,$(*F),$(BDW_memory_map_BASIC_HLS_SPEC_TARGETS))

endif

	

$(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h) : $(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp) $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module memory_map -cynthconfig BASIC_$(*F)  

catHLLog_memory_map_BASIC:
	cat $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_memory_map_BASIC : hls_memory_map_BASIC 


.PHONY: hls_memory_map_BASIC

hls_memory_map_BASIC hlsv_memory_map_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_memory_map_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_memory_map_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.memory_map.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_memory_map_BASIC
endif

.PHONY: hls_memory_map_BASIC

hls_memory_map_BASIC_% hlsv_memory_map_BASIC_%: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_memory_map_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_memory_map_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.memory_map.BASIC_$(*F) $(MAKE) CWBExec_hlsv=1 hlsv_memory_map_BASIC_$(*F)
endif

catVLGLog_memory_map_BASIC : catHLLog_memory_map_BASIC
	cat $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_vlg.log

#
#	view rule
#

view_memory_map_BASIC:
	@echo "ERROR: Schematic viewing target 'view_memory_map_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o : $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl memory_map`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC/ -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_rtl.o : $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl memory_map`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC/ -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_rtl.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_beh.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_BEH_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_beh.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_beh.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_BEH_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_beh.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_COSIM_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp
    

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_hoist.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_hoist.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp
    

$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_COSIM_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp


$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_hoist.o :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(BDW_WORKLIB)/wrappers/memory_map_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_hoist.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp
    

view_memory_map_BASIC_%:
	@echo "ERROR: Schematic viewing target 'view_memory_map_BASIC_$(*F)' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

ifneq ($(BDW_SPEC_NAME),)
#
#	RTL object file rule
#
$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp) $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl memory_map`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC/ -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_rtl.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp) $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl memory_map`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC/ -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_rtl.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_beh.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_BEH_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_beh.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_beh.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_BEH_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_beh.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)

#
# Cosim object file rule
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_COSIM_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_hoist.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_hoist.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_COSIM_memory_map_BASIC) -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)


$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_hoist.o) :  ../src/memory_map.cpp $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp $(BDW_WORKLIB)/wrappers/memory_map_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/memory_map_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/memory_map/BASIC -I./ $(CCFLAGS_memory_map_BASIC) $(EXTRACT_LIB_DASHI_memory_map_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_hoist.o " $(BDW_WORKLIB)/wrappers/memory_map_wrap.cpp)
    
endif

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map.d :  ../src/memory_map.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_memory_map_BASIC)  ../src/memory_map.cpp \
	| sed 's|memory_map\.o[ :]*|$(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/memory_map_beh.o $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium/debug/memory_map_beh.o $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/memory_map/BASIC"
##############################################################

memory_map_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/memory_map/BASIC
memory_map_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/memory_map_BASIC
memory_map_BASIC_LIBNAME = memory_map_BASIC
memory_map_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/memory_map/BASIC/xcelium
memory_map_BASIC_C_PARTS_A = $(memory_map_BASIC_WORKLIB)/objs/libmemory_map_BASIC.a

prep_c_memory_map_BASIC : $(memory_map_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB) prep_c

prep_c_memory_map_BASIC_% : $(memory_map_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB)_$(*F) prep_c

prep_vlog_memory_map_BASIC : $(memory_map_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB) prep_vlog

prep_vlog_memory_map_BASIC_% : $(memory_map_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB)_$(*F) prep_vlog

prep_memory_map_BASIC : $(memory_map_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB) prep

prep_memory_map_BASIC_% : $(memory_map_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(memory_map_BASIC_WORKLIB)_$(*F) prep

$(memory_map_BASIC_WORKLIB)/Makefile : $(memory_map_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(memory_map_BASIC_WORKLIB) ]; then mkdir -p $(memory_map_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(memory_map_BASIC_SRCDIR) -o $(memory_map_BASIC_WORKLIB)/Makefile -module memory_map -cynthconfig BASIC   

$(memory_map_BASIC_WORKLIB)_%/Makefile : $(memory_map_BASIC_SRCDIR)_%/stratus_hls.bdl
	@if [ ! -d $(memory_map_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(memory_map_BASIC_WORKLIB)_$(*F); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(memory_map_BASIC_SRCDIR)_$(*F) -o $(memory_map_BASIC_WORKLIB)_$(*F)/Makefile -module memory_map -cynthconfig BASIC_$(*F)   

$(memory_map_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(memory_map_BASIC_WORKLIB) ]; then mkdir -p $(memory_map_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi

$(memory_map_BASIC_SRCDIR)_%/stratus_hls.bdl :
	@if [ ! -d $(memory_map_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(memory_map_BASIC_WORKLIB)_$(*F); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(memory_map_BASIC_WORKLIB)/memory_map_BASIC.d :
	@if [ ! -d $(memory_map_BASIC_WORKLIB) ]; then mkdir -p $(memory_map_BASIC_WORKLIB); fi
	@touch $(memory_map_BASIC_WORKLIB)/memory_map_BASIC.d



##############################################################
## HLS Module "top"
##############################################################


#
# Dependency Generation rule for BEH module
#
$(BDW_OBJDIR)/top.d :  ../src/top.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for $< "
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)  ../src/top.cpp \
	| sed 's|top\.o[ :]*|$(BDW_OBJDIR)/top.o $(BDW_OBJDIR)/top.d : |' $(BDW_DEP_FILTER)  > $@

$(BDW_WORKLIB)/wrappers/top_trace.h : $(BDW_WORKLIB)/wrappers/top_trace.h.updated

$(BDW_WORKLIB)/wrappers/top_trace.h.updated :  ../src/top.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module top  
	@touch $(BDW_WORKLIB)/wrappers/top_trace.h.updated



$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/top.o:  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

$(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/top.o:  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " $(BDW_CCFLAGS)   -o $(BDW_WORKLIB)/sims/$(BDW_SIM_CONFIG)/xcelium/debug/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

.INTERMEDIATE : top_wrap.h

top_wrap.h : $(BDW_WORKLIB)/wrappers/top_wrap.h

$(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_cosim.v   : $(BDW_WRAPDIR)/top.updated

$(BDW_WRAPDIR)/top.updated :  ../src/top.cpp 
	@if [ ! -d $(BDW_WRAPDIR) ]; then mkdir -p $(BDW_WRAPDIR); fi
	$(BDW_WRAPGEN_COMMAND) -project project.tcl -module top "-I$(BDW_WRAPDIR) $(BDW_LIB_DASHI) $(BDW_CCOPTIONS) $(BDW_EXTRA_CCFLAGS)"
	@touch $(BDW_WRAPDIR)/top.updated
	$(STRATUS_HOME)/bin/bdw_tracegen -module top  
	@touch $(BDW_WORKLIB)/wrappers/top_trace.h.updated
$(BDW_WORKLIB)/wrappers/top_wrap.d :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@set -e; $(BDW_CCDEP) -MM -MG $(BDW_CCFLAGS)   ../src/top.cpp \
		| sed 's|top\.o[ :]*|$(BDW_WRAPDIR)/top.updated $(BDW_WORKLIB)/wrappers/top_wrap.d :  |' $(BDW_DEP_FILTER) > $(BDW_WORKLIB)/wrappers/top_wrap.d 

$(BDW_WRAPDIR)/top.updated : $(BDW_WRAPDIR)/datapath.updated
$(BDW_WRAPDIR)/top.updated : $(BDW_WRAPDIR)/controller.updated
$(BDW_WRAPDIR)/top.updated : $(BDW_WRAPDIR)/memory_map.updated



##############################################################
## HLS Module "top" - cynthConfigs
##############################################################


#
# HLS config BASIC
#

#
#	stratus_hls rule
#
LIB_DIRS_top_BASIC = 
LIB_INCLUDES_top_BASIC = $(addprefix -I,$(addsuffix /c_parts,$(LIB_DIRS_top_BASIC))) $(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS)))
LIB_NAMES_top_BASIC = 
LIB_NAMES_FOR_VLOG_top_BASIC = 
PREFIXED_LIB_NAMES_top_BASIC = 
EXTRACT_LIB_DASHI_top_BASIC = $(shell echo "puts stdout [extractHoistLibDashIs project.tcl top BASIC]" | $(STRATUS_HOME)/bin/bdw_shell)
CCFLAGS_top_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/top/BASIC/c_parts -DBASIC=1 -DBDW_RTL_top_BASIC=1   $(LIB_INCLUDES_top_BASIC)
CCFLAGS_COSIM_top_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/top/BASIC/c_parts -DBASIC=1 -DBDW_RTL_top_BASIC=1   $(LIB_INCLUDES_top_BASIC)
CCFLAGS_BEH_top_BASIC = -I./ -I$(BDW_WRAPDIR)  -DBDW_CC_SPEC=1 -I$(BDW_WORKLIB)/modules/top/BASIC/c_parts -DBASIC=1   $(LIB_INCLUDES_top_BASIC)
CCFLAGS_top_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_COSIM_top_BASIC += ${BDW_CCFLAGS_TAIL}
CCFLAGS_BEH_top_BASIC += ${BDW_CCFLAGS_TAIL}

hls_top_BASIC : hlsc_top_BASIC

cynth_top_BASIC : hlsc_top_BASIC

elab_top_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr

optim_top_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr

sched_top_BASIC : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr

.PHONY: hlsc_top_BASIC hls_top_BASIC

hlsc_top_BASIC : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=top BDW_HLS_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hls.top.BASIC $(MAKE) CWBExec_hls=1 hlsc_top_BASIC
endif

clean_cynth_top_BASIC: clean_hls_top_BASIC

clean_top_BASIC: clean_hls_top_BASIC

clean_hls_top_BASIC:
	@rm -rf $(BDW_WORKLIB)/modules/top/BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.top.BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/hls.top.BASIC.s

kill_hls_top_BASIC:
	@bdw_kill -job hls.top.BASIC
	@bdw_kill -job hls.top.BASIC.s


hls_top_BASIC_% : hlsc_top_BASIC_%

cynth_top_BASIC_% : hlsc_top_BASIC_%

elab_top_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=elab" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr)

optim_top_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=optim" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr)

sched_top_BASIC_% : 
	@BDW_EXTRA_HLFLAGS="$(BDW_EXTRA_HLFLAGS) --run_through=sched" $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr)

.PHONY: hlsc_top_BASIC_% hls_top_BASIC_%

hlsc_top_BASIC_% hls_top_BASIC_% : 
ifeq ($(CWBExec_hls),1)
	@$(BDW_LAUNCH_HLS_COMMAND) $(MAKE) $(subst /BASIC/,/BASIC_$(*F)/,$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp) BDW_DEP_CYNTH_CONFIG=BASIC BDW_MODULE=top BDW_HLS_CONFIG=BASIC_$(*F)
else
	@bdw_exec -jobproject project.tcl -job hls.top.BASIC_$(*F) $(MAKE) CWBExec_hls=1 hlsc_top_BASIC_$(*F)
endif

clean_cynth_top_BASIC_%: clean_hls_top_BASIC_%

clean_top_BASIC_%: clean_hls_top_BASIC_%

clean_hls_top_BASIC_%:
	@rm -rf $(BDW_WORKLIB)/modules/top/BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.top.BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/hls.top.BASIC_$(*F).s

kill_hls_top_BASIC_%:
	@bdw_kill -job hls.top.BASIC_$(*F)
	@bdw_kill -job hls.top.BASIC_$(*F).s


ifeq ($(BDW_DEP_CYNTH_CONFIG),BASIC)
    ifeq ($(findstring CLEAN,$(MAKECMDGOALS)),)
        ifeq ($(findstring clean,$(MAKECMDGOALS)),)
            ifeq ($(findstring help,$(MAKECMDGOALS)),)
                -include $(BDW_WORKLIB)/modules/top/BASIC/top.d
                BDW_LIB_DEPS = 
            endif
        endif
    endif
endif


html_top_BASIC :
	bdw_htmlgen -project project.tcl -module top -cynthconfig BASIC

BDW_top_BASIC_HLS_TARGETS = $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr
BDW_top_BASIC_HLS_SPEC_TARGETS = $(subst /BASIC/,/BASIC_%/,$(BDW_top_BASIC_HLS_TARGETS))




ifeq ($(CWBExec_hlsc),1)

$(BDW_top_BASIC_HLS_TARGETS) :  ../src/top.cpp  $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/top/BASIC ]; then mkdir -p $(BDW_WORKLIB)/modules/top/BASIC; fi
	
	$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp \
		BDW_MODULE=top \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/top/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/top/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_top_BASIC) \
		-d $(BDW_WORKLIB)/modules/top/BASIC -o top_rtl.cpp \
		--hls_module=top --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_top_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_top_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_top_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_top_BASIC) \
		 ../src/top.cpp
	
	
	
	

else

$(BDW_top_BASIC_HLS_TARGETS) :  ../src/top.cpp  $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.top.BASIC.s $(MAKE) -j1 CWBExec_hlsc=1 $(BDW_top_BASIC_HLS_TARGETS)

endif

	
$(BDW_WORKLIB)/modules/top/BASIC/top_trace.h : $(BDW_WORKLIB)/modules/top/BASIC/top_trace.h.updated

$(BDW_WORKLIB)/modules/top/BASIC/top_trace.h.updated : $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module top -cynthconfig BASIC  
	@touch $(BDW_WORKLIB)/modules/top/BASIC/top_trace.h.updated

ifeq ($(CWBExec_hlsc),1)

$(BDW_top_BASIC_HLS_SPEC_TARGETS) :  ../src/top.cpp  $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_LIB_DEPS)
	@if [ ! -d $(BDW_WORKLIB)/modules/top/BASIC_$(*F) ]; then mkdir -p $(BDW_WORKLIB)/modules/top/BASIC_$(*F); fi
	
	$(subst /BASIC ,/BASIC_$(*F) ,$(subst =BASIC ,=BASIC_$(*F) ,$(subst /top/BASIC/,/top/BASIC_$(*F)/,$(BDW_EXEC_CMD) BDW_HLS_CONFIG=BASIC BDW_CYNTH_CONFIG=BASIC \
		BDW_VRTL_FILE=$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v \
		BDW_CRTL_FILE=$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp \
		BDW_MODULE=top \
		BDW_CYNTH_CONFIG=BASIC \
		BDW_CYNTH_CONFIG_DIR=$(BDW_WORKLIB)/modules/top/BASIC \
		BDW_HLS_CONFIG=BASIC \
		BDW_HLS_CONFIG_DIR=$(BDW_WORKLIB)/modules/top/BASIC \
	$(CYNTHHL) $(HL_FLAGS) $(HL_FLAGS_top_BASIC) \
		`cat  $(BDW_SPECLIB)/top/BASIC.$(*F).bds | grep '^cmdline:' | sed 's/^cmdline://'`\
		-d $(BDW_WORKLIB)/modules/top/BASIC -o top_rtl.cpp \
		--hls_module=top --hls_config=BASIC --project=project.tcl \
		$(addprefix -P ,$(addsuffix /c_parts,$(LIB_DIRS_top_BASIC))) \
		$(addprefix -p , $(notdir $(LIB_NAMES_top_BASIC))) \
		$(addprefix -pu , $(notdir $(PREFIXED_LIB_NAMES_top_BASIC))) \
		$(addprefix -I ,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
		$(EXTRACT_LIB_DASHI_top_BASIC) \
		 ../src/top.cpp)))
	
	
	
	

else

$(BDW_top_BASIC_HLS_SPEC_TARGETS) :  ../src/top.cpp  $(BDW_WORKLIB)/wrappers/datapath_wrap.h $(BDW_WORKLIB)/wrappers/controller_wrap.h $(BDW_WORKLIB)/wrappers/memory_map_wrap.h $(BDW_LIB_DEPS)
	bdw_exec -jobproject project.tcl -job hls.top.BASIC_$(*F).s $(MAKE) -j1 CWBExec_hlsc=1 $(subst %,$(*F),$(BDW_top_BASIC_HLS_SPEC_TARGETS))

endif

	

$(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/top/BASIC/top_trace.h) : $(subst /BASIC/,/BASIC_%/,$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp) $(BDW_LOGOPTIONS_FILE)
	$(STRATUS_HOME)/bin/bdw_tracegen -module top -cynthconfig BASIC_$(*F)  

catHLLog_top_BASIC:
	cat $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.log

#
#	stratus_vlg rule
#
cynthvlg_top_BASIC : hls_top_BASIC 


.PHONY: hls_top_BASIC

hls_top_BASIC hlsv_top_BASIC: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_top_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_top_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.top.BASIC $(MAKE) CWBExec_hlsv=1 hlsv_top_BASIC
endif

.PHONY: hls_top_BASIC

hls_top_BASIC_% hlsv_top_BASIC_%: $(addprefix prep_vlog_,$(LIB_NAMES_FOR_VLOG_top_BASIC)) 
ifeq ($(CWBExec_hlsv),1)
	@$(MAKE)  prep_vlog_top_BASIC BDW_DEP_CYNTH_CONFIG=BASIC
else
	@bdw_exec -jobproject project.tcl -job hlsv.top.BASIC_$(*F) $(MAKE) CWBExec_hlsv=1 hlsv_top_BASIC_$(*F)
endif

catVLGLog_top_BASIC : catHLLog_top_BASIC
	cat $(BDW_WORKLIB)/modules/top/BASIC/stratus_vlg.log

#
#	view rule
#

view_top_BASIC:
	@echo "ERROR: Schematic viewing target 'view_top_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


#
#	RTL object file rule
#
$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o : $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/modules/top/BASIC/top_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/top_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl top`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC/ -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_rtl.o : $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/modules/top/BASIC/top_trace.h
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/top_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl top`
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC/ -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_rtl.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_beh.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_BEH_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_beh.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_beh.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_BEH_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_beh.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp

#
# Cosim object file rule
#

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_COSIM_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp
    

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_hoist.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_hoist.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp
    

$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_COSIM_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp


$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_hoist.o :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(BDW_WORKLIB)/wrappers/top_trace.h
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_hoist.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp
    

view_top_BASIC_%:
	@echo "ERROR: Schematic viewing target 'view_top_BASIC_$(*F)' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

ifneq ($(BDW_SPEC_NAME),)
#
#	RTL object file rule
#
$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp) $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/top_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/top_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl top`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC/ -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_rtl.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_rtl.o) : $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp) $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/top_trace.h)
	@if [ ! -d $(@D) ] ; then mkdir -p $(@D) ; fi
	@$(MAKE)  $(BDW_WORKLIB)/wrappers/top_wrap.cpp `$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_nestedwrap.tcl project.tcl top`
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC/ -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_RTL=1 -DBDW_HUB=1 -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_rtl.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)

#
#	Behavioral object file rule.  Used only for BEH configs that are 
#	associated with HLS config names.
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_beh.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_BEH_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_beh.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_beh.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_BEH_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_beh.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)

#
# Cosim object file rule
#

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_COSIM_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_hoist.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_hoist.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)
    

$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_wrap.h $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_COSIM_top_BASIC) -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)


$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_hoist.o) :  ../src/top.cpp $(BDW_WORKLIB)/wrappers/top_wrap.cpp $(BDW_WORKLIB)/wrappers/top_cosim.h $(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_WORKLIB)/wrappers/top_trace.h)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	$(subst /BASIC/,/BASIC$(BDW_SPEC_SUF)/,$(BDW_CC) " -I$(BDW_WORKLIB)/modules/top/BASIC -I./ $(CCFLAGS_top_BASIC) $(EXTRACT_LIB_DASHI_top_BASIC) -DBDW_HOIST -o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_hoist.o " $(BDW_WORKLIB)/wrappers/top_wrap.cpp)
    
endif

#
#	Dependency generation rule
#
$(BDW_WORKLIB)/modules/top/BASIC/top.d :  ../src/top.cpp
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	@echo "Generating dependencies for HLS config BASIC of "$<
	@set -e; $(BDW_CCDEP) -MM -MG $(CCFLAGS_top_BASIC)  ../src/top.cpp \
	| sed 's|top\.o[ :]*|$(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_WORKLIB)/modules/top/BASIC/xcelium/top_beh.o $(BDW_WORKLIB)/modules/top/BASIC/xcelium/debug/top_beh.o $(BDW_WORKLIB)/modules/top/BASIC/top.d :  |' $(BDW_DEP_FILTER)  > $@

#
#	Library post-proc rules
#



##############################################################
## Parts Library "$(BDW_WORKLIB)/modules/top/BASIC"
##############################################################

top_BASIC_SRCDIR = $(BDW_WORKLIB)/modules/top/BASIC
top_BASIC_BEH_SRCDIR = $(BDW_WORKLIB)/libs/top_BASIC
top_BASIC_LIBNAME = top_BASIC
top_BASIC_WORKLIB = $(BDW_WORKLIB)/modules/top/BASIC/xcelium
top_BASIC_C_PARTS_A = $(top_BASIC_WORKLIB)/objs/libtop_BASIC.a

prep_c_top_BASIC : $(top_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB) prep_c

prep_c_top_BASIC_% : $(top_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB)_$(*F) prep_c

prep_vlog_top_BASIC : $(top_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB) prep_vlog

prep_vlog_top_BASIC_% : $(top_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB)_$(*F) prep_vlog

prep_top_BASIC : $(top_BASIC_WORKLIB)/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB) prep

prep_top_BASIC_% : $(top_BASIC_WORKLIB)_%/Makefile
	@+make --no-print-directory $(BDW_PMAKE_FLG) -C $(top_BASIC_WORKLIB)_$(*F) prep

$(top_BASIC_WORKLIB)/Makefile : $(top_BASIC_SRCDIR)/stratus_hls.bdl
	@if [ ! -d $(top_BASIC_WORKLIB) ]; then mkdir -p $(top_BASIC_WORKLIB); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(top_BASIC_SRCDIR) -o $(top_BASIC_WORKLIB)/Makefile -module top -cynthconfig BASIC   

$(top_BASIC_WORKLIB)_%/Makefile : $(top_BASIC_SRCDIR)_%/stratus_hls.bdl
	@if [ ! -d $(top_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(top_BASIC_WORKLIB)_$(*F); fi
	$(STRATUS_HOME)/bin/bdw_makegen project.tcl -scsim xcelium -lib $(top_BASIC_SRCDIR)_$(*F) -o $(top_BASIC_WORKLIB)_$(*F)/Makefile -module top -cynthconfig BASIC_$(*F)   

$(top_BASIC_SRCDIR)/stratus_hls.bdl :
	@if [ ! -d $(top_BASIC_WORKLIB) ]; then mkdir -p $(top_BASIC_WORKLIB); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi

$(top_BASIC_SRCDIR)_%/stratus_hls.bdl :
	@if [ ! -d $(top_BASIC_WORKLIB)_$(*F) ]; then mkdir -p $(top_BASIC_WORKLIB)_$(*F); fi
	@if [ ! -f $@ ]; then echo "createEmptyBdl $@ MEMORY 0" | $(STRATUS_HOME)/bin/bdw_shell; fi



$(top_BASIC_WORKLIB)/top_BASIC.d :
	@if [ ! -d $(top_BASIC_WORKLIB) ]; then mkdir -p $(top_BASIC_WORKLIB); fi
	@touch $(top_BASIC_WORKLIB)/top_BASIC.d



#
# Rules for configured systemModules
#


#
# Per-hls_config rules
#

cynth_BASIC:  cynth_datapath_BASIC cynth_controller_BASIC cynth_memory_map_BASIC cynth_top_BASIC
hlsc_BASIC:  
	$(MAKE) -j1 hlsc_datapath_BASIC hlsc_controller_BASIC hlsc_memory_map_BASIC 
	$(MAKE) -j1 hlsc_top_BASIC

cynthvlg_BASIC: hls_BASIC
hls_BASIC:  
	$(MAKE) -j1 hls_datapath_BASIC hls_controller_BASIC hls_memory_map_BASIC 
	$(MAKE) -j1 hls_top_BASIC

cynthvlg_BASIC: elab_BASIC
elab_BASIC:  
	$(MAKE) -j1 elab_datapath_BASIC elab_controller_BASIC elab_memory_map_BASIC 
	$(MAKE) -j1 elab_top_BASIC

cynthvlg_BASIC: optim_BASIC
optim_BASIC:  
	$(MAKE) -j1 optim_datapath_BASIC optim_controller_BASIC optim_memory_map_BASIC 
	$(MAKE) -j1 optim_top_BASIC

cynthvlg_BASIC: sched_BASIC
sched_BASIC:  
	$(MAKE) -j1 sched_datapath_BASIC sched_controller_BASIC sched_memory_map_BASIC 
	$(MAKE) -j1 sched_top_BASIC

view_BASIC:
	@echo "ERROR: Schematic viewing target 'view_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."


clean_BASIC:
	@rm -f $(BDW_WORKLIB)/modules/datapath/BASIC/datapath_rtl.cpp $(BDW_WORKLIB)/modules/datapath/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/controller/BASIC/controller_rtl.cpp $(BDW_WORKLIB)/modules/controller/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/memory_map/BASIC/memory_map_rtl.cpp $(BDW_WORKLIB)/modules/memory_map/BASIC/stratus_hls.bdr
	@rm -f $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.cpp $(BDW_WORKLIB)/modules/top/BASIC/stratus_hls.bdr



##############################################################################
#   start of rules for logic synthesis
##############################################################################

synth1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_LS_CONFIG_DIR) ]; then mkdir -p $(BDW_LS_CONFIG_DIR); fi
	@rm -rf $(BDW_LS_CONFIG_LOGS)
	@$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_synthinfo.tcl
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' STARTED"
ifeq ($(BDW_LS_LIC),)
	@echo "****** Error: synth1target FAILED because BDW_LS_LIC was not set"; exit 1
endif
endif
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job ls.$(BDW_LS_CONFIG).s $(BDW_LS_CMD)
ifeq ($(BDW_USE_GRID_INT),1)
	@date +"INFO: %D %T ${@} in `pwd` BDW_LS_LIC='${BDW_LS_LIC}' BDW_LS_CMD='${BDW_LS_CMD}' FINISHED"
endif


#
#   Rules for logicSynth config RC_BASIC
#


ifeq ($(CWBExec_ls),1)
ls_RC_BASIC:
	@$(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) $(BDW_WORKLIB)/logicsynth/RC_BASIC/top_gates.v
else
.PHONY: ls_RC_BASIC

ls_RC_BASIC:
	@bdw_exec -jobproject project.tcl -job ls.RC_BASIC $(MAKE) CWBExec_ls=1 ls_RC_BASIC

ls_sub_RC_BASIC:
	@bdw_exec -jobproject project.tcl -job ls_sub.RC_BASIC.s $(MAKE) CWBExec_ls=1 ls_RC_BASIC
endif

kill_ls_RC_BASIC:
	@bdw_kill -job ls.RC_BASIC
	@bdw_kill -job ls.RC_BASIC.s

clean_ls_RC_BASIC:
	@rm -rf $(BDW_WORKLIB)/logicsynth/RC_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/ls.RC_BASIC
	@rm -rf $(BDW_WORKLIB)/jobs/ls.RC_BASIC.s

$(BDW_WORKLIB)/logicsynth/RC_BASIC/top_gates.v: 
	@$(MAKE) -j1  $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v 

ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_top_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=RC_BASIC BDW_MODULE=top \
		BDW_LS_CONFIG_DIR=$(BDW_WORKLIB)/logicsynth/RC_BASIC \
		BDW_LS_CONFIG_LOGS="$(BDW_WORKLIB)/logicsynth/RC_BASIC/top.log $(BDW_WORKLIB)/logicsynth/RC_BASIC/top.bdr" \
		BDW_LS_CMD="bdw_runrc" \
		BDW_UPF_DATA_FILES="$(BDW_WORKLIB)/modules/top/BASIC/top_upf.data" \
		BDW_UPF_MODULES="top" \
		BDW_PWR_DASH_NETLIST=0 \
		BDW_LS_INFO=$(BDW_WORKLIB)/logicsynth/RC_BASIC/top.info \


view_ls_RC_BASIC: 
	@echo "ERROR: Schematic viewing target 'view_ls_RC_BASIC' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

ifeq ($(CWBExec_ls),1)
ls_RC_BASIC_%:
	@$(BDW_LAUNCH_LOGIC_SYNTHESIS_COMMAND) $(MAKE) $(subst /RC_BASIC,/RC_BASIC_$(*F),$(BDW_WORKLIB)/logicsynth/RC_BASIC/top_gates.v)
else
.PHONY: ls_RC_BASIC

ls_RC_BASIC_%:
	@bdw_exec -jobproject project.tcl -job ls.RC_BASIC_$(*F) $(MAKE) CWBExec_ls=1 ls_RC_BASIC_$(*F)

ls_sub_RC_BASIC_%:
	@bdw_exec -jobproject project.tcl -job ls_sub.RC_BASIC_$(*F).s $(MAKE) CWBExec_ls=1 ls_RC_BASIC_$(*F)
endif

kill_ls_RC_BASIC_%:
	@bdw_kill -job ls.RC_BASIC_$(*F)
	@bdw_kill -job ls.RC_BASIC_$(*F).s

clean_ls_RC_BASIC_%:
	@rm -rf $(subst /RC_BASIC,/RC_BASIC_$(*F),$(BDW_WORKLIB)/logicsynth/RC_BASIC)
	@rm -rf $(BDW_WORKLIB)/jobs/ls.RC_BASIC_$(*F)
	@rm -rf $(BDW_WORKLIB)/jobs/ls.RC_BASIC_$(*F).s

$(subst /RC_BASIC/,/RC_BASIC_%/,$(BDW_WORKLIB)/logicsynth/RC_BASIC/top_gates.v): 
	@$(BDW_SPEC_CHECK) ${BDW_PROJECT_FILE} logic_synth_config RC_BASIC_$(*F)
	@$(MAKE) -j1 `$(BDW_SPEC_FILTER) project.db $(*F)  $(BDW_WORKLIB)/modules/top/BASIC/top_rtl.v `

ifneq ($(BDW_VLOG_LIBPREP),)
	@$(MAKE) $(BDW_VLOG_LIBPREP)
endif 
	@$(MAKE) prep_vlog_top_BASIC 
	@$(MAKE) synth1target BDW_LS_CONFIG=RC_BASIC_$(*F) BDW_MODULE=top \
		BDW_LS_CONFIG_DIR=$(subst /RC_BASIC,/RC_BASIC_$(*F),$(BDW_WORKLIB)/logicsynth/RC_BASIC) \
		BDW_LS_CONFIG_LOGS=$(subst /RC_BASIC/,/RC_BASIC_$(*F)/,"$(BDW_WORKLIB)/logicsynth/RC_BASIC/top.log $(BDW_WORKLIB)/logicsynth/RC_BASIC/top.bdr") \
		BDW_LS_CMD="bdw_runrc" \
		BDW_UPF_DATA_FILES=`$(BDW_SPEC_FILTER) project.db $(*F) "$(BDW_WORKLIB)/modules/top/BASIC/top_upf.data"` \
		BDW_UPF_MODULES="top" \
		BDW_PWR_DASH_NETLIST=0 \
		BDW_LS_INFO=$(subst /RC_BASIC/,/RC_BASIC_$(*F)/,$(BDW_WORKLIB)/logicsynth/RC_BASIC/top.info) \


view_ls_RC_BASIC_%: 
	@echo "ERROR: Schematic viewing target 'view_ls_RC_BASIC_$(*F)' is only supported with 'verdi'"
	@echo "The Stratus IDE includes a schematic view as an alternative."

##############################################################################
#   start of rules for code analysis
##############################################################################

analysis1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
	@if [ ! -d $(BDW_ANALYSIS_CONFIG_DIR) ]; then mkdir -p $(BDW_ANALYSIS_CONFIG_DIR); fi
	@rm -rf $(BDW_ANALYSIS_CONFIG_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job analysis.$(BDW_ANALYSIS_CONFIG).s $(BDW_ANALYSIS_CMD) -project project.tcl -aconfig $(BDW_ANALYSIS_CONFIG) 2>&1 | tee $(BDW_ANALYSIS_CONFIG_DIR)/$(BDW_ANALYSIS_CONFIG).log

##############################################################################
#   start of rules for place and route
##############################################################################

pnr1target:
	@echo "NOTE 02926: BEGIN EXTERNAL TOOL PROCESSING"
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@if [ ! -d $(BDW_PNR_CONFIG_DIR) ]; then mkdir -p $(BDW_PNR_CONFIG_DIR); fi
	@rm -rf $(BDW_PNR_LOGS)
	@$(BDW_EXEC_CMD) bdw_exec -jobproject project.tcl -job pnr.$(BDW_PNR_CONFIG).s $(BDW_PNR_CMD) project.tcl $(BDW_PNR_CONFIG) 



#############################################################################
#  Rules for equivalence checking
#############################################################################
    

#############################################################################
#  Rules for Power estimation
#############################################################################
    


.INTERMEDIATE : $(BDW_LIBPREP) 

.PHONY : siminfo

siminfo :
	$(BDW_SIMCONFIG_MKDIR)
	@if [ ! -d $(BDW_WORKLIB)/INCA_libs ] ; then \
	    mkdir -p $(BDW_WORKLIB)/INCA_libs/bdw_worklib ; \
	fi	
	@echo "DEFINE bdw_worklib INCA_libs/bdw_worklib" > $(BDW_WORKLIB)/cds.lib
	@echo "DEFINE WORK bdw_worklib" > $(BDW_WORKLIB)/hdl.var
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl project.tcl $(BDW_SIM_CONFIG)


######################################################################
## Rules for building executables, shared libs, and running sims.
######################################################################

BDW_LIB_DASHI = \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_INDLIB_DIRS))) \
	$(addprefix -I,$(addsuffix /c_parts,$(BDW_WHOLELIB_DIRS)))

BDW_SC_DEBUG_SRC = $(shell if [ -d $(SYSTEMC)/src ]; then echo "-d $(SYSTEMC)/src"; else echo ""; fi)
BDW_SIM_CONFIG_DIR	=	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)
BDW_SIMCONFIG_MKDIR	=	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG) ]; then mkdir -p $(BDW_SIMDIR)/$(BDW_SIM_CONFIG); fi
BDW_SIM_ENV_SETUP	=	BDW_SIM_CONFIG_DIR=$(BDW_SIM_CONFIG_DIR)
BDW_END_OF_SIM_CMD	=	@echo
BDW_STRT_OF_SIM_CMD	=	@echo
ifneq ($(BDW_HUB_ARGV),)
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/xcelium/debug/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG}.so,argv="$(shell echo $(BDW_HUB_ARGV)|sed 's/ /%/g')"
    endif
else
    ifeq ($(BDW_DEBUG),1)
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/xcelium/debug/sim_${BDW_SIM_CONFIG}.so
    else
    BDW_VLOGSIM_ARGSINT +=  +hubSetOption+libdef=${BDW_SIMDIR}/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG}.so
    endif
endif
BDW_VLOGSIM_ARGSINT += +hubSetOption+bdr=$(BDW_SIM_CONFIG_DIR)/sim.bdr
ifeq ($(RUN_DEBUGGER),1)
    BDW_VLOGSIM_ARGSINT  := $(strip $(BDW_VLOGSIM_ARGSINT)),gdbgui
	BDW_PREEXEC_DEBUG = gdb &
	BDW_INLINE_DEBUG = gdb --args
endif
BDW_VLOGSIM_DEPS	=	$(COSIM_FILES) $(BDW_LIBPREP) $(BDW_ESC_LIB)

######################################################################
# Verilog RTL Code Coverage Simulation Setup
######################################################################

ifeq ($(BDW_MTI_POST_SIM_COMMANDS),)
BDW_MTI_POST_SIM_COMMANDS = 
endif

###############################################

.PHONY: run_sim

run_sim: 
	$(MAKE) $(EXECUTABLE)

scsim_$(BDW_SIM_CONFIG): $(SIM_BUILD)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	@echo "Executing simulation: $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV)"
	$(BDW_STRT_OF_SIM_CMD)
	@( $(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_INLINE_DEBUG) $(SIM_BUILD) $(BDW_SCSIM_ARGS) $(BDW_HUB_ARGV) ; \
          simstatus=$$? ; export simstatus; \
          if [ $$simstatus -ne 0 ] ; then \
            if [ $$simstatus -gt 127 ] ; then \
                echo "ERROR: simulation exited with signal $$(($$simstatus - 128))" ; \
            else echo "WARNING: exit status = $$simstatus"; fi ; \
          fi ) 2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

#####################################################################
#####################################################################
update_hierarchy: bdw_prebuild_wrappers
	@$(STRATUS_HOME)/bin/bdw_makegen project.tcl -o Makefile.prj 


clean_sim_objs:
	@rm -rf `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(SIM_OBJS)` $(DEP_FILES) $(dir $(BDW_LIBREF))

bdw_sim_build: $(SIM_BUILD)
build_sim_image: bdw_prebuild_wrappers bdw_prebuild_rtl bdw_prebuild_sim_objs
	@$(MAKE) -j 4 bdw_sim_build BDW_SIM_OBJS="`$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(SIM_OBJS)`"

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(BDW_SIM_OBJS) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	[ -z "$(BDW_LIBPREP)" ] || $(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_LIBPREP)`
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/TPtools/gcclib/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE) \
		$(BDW_SIM_OBJS) \
		`$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_CPARTS_A)` \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
		mv $(BDW_TMPLNK_FILE) $(SIM_BUILD)
else
$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)$(BDW_DEBUG_DIR)/sim_$(BDW_SIM_CONFIG): $(BDW_SIM_OBJS) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB)
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	[ -z "$(BDW_LIBPREP)" ] || $(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_LIBPREP)`
	$(BDW_LINK) $(BDW_EXELINKFLAG) $(BDW_DEBUG_OPT) $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/TPtools/gcclib/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(SIM_BUILD) \
		$(BDW_SIM_OBJS) \
		`$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_CPARTS_A)` \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		${BDW_HUBLIBS} $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS)
endif

##############################################################
## COSIM simulator rules
##############################################################

vcs: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug_acc+pp+f+dmptf -debug_region+cell+encrypt $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcs -debug_acc+pp+f+dmptf -debug_region+cell+encrypt $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo \
		-o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

vcsi: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
ifeq ($(BDW_SIM_RUNTIME),)
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug_acc+pp+f+dmptf -debug_region+cell+encrypt $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
else
		$(BDW_EXEC_CMD) $(STRATUS_HOME)/bin/hub_vcsi -debug_acc+pp+f+dmptf -debug_region+cell+encrypt $(BDW_FSDB_VCS_ARGS) -f $(BDW_SIM_CONFIG_DIR)/siminfo -o $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} \
	    +libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+vcs+finish+$(BDW_SIM_RUNTIME)000
endif
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do ]; then \
		echo "run" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
		echo "quit" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do; \
	fi
	$(BDW_PREEXEC_DEBUG)
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_${BDW_SIM_CONFIG} $(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) \
        -ucli \
	    -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
	    -i $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/vcs.do \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

incisive_covsetup:


xcelium incisive ncverilog: $(BDW_VLOGSIM_DEPS) incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		+nowarn+LIBNOU $(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) $(BDW_VERILOG_SIM_ARGS) \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do ]; then \
		echo "" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
		echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/ncverilog.do; \
	fi
	$(BDW_EXEC_CMD)  $(BDW_EXEC_FLG) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	$(STRATUS_HOME)/bin/hub_ncverilog \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES) \
		$(BDW_VLOGSIM_ARGS) $(BDW_VLOGSIM_ARGSINT) $(BDW_VERILOG_SIM_ARGS) -l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


export MTI_VCO_MODE = 64

mti: $(BDW_VLOGSIM_DEPS)
ifneq ($(PASSED_LOG),)
	@echo removing log.passed in mti:
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	$(BDW_SIMCONFIG_MKDIR)
	$(BDW_STRT_OF_SIM_CMD)
	@if [ ! -d $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work ]; then vlib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work; fi
	$(STRATUS_HOME)/bin/hub_vlog -work $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work \
		-f $(BDW_SIM_CONFIG_DIR)/siminfo \
		+libext+.v $(BDW_VLOGCOMP_ARGS)  $(BDW_VLOG_DEFINES)
	$(BDW_PREEXEC_DEBUG)
ifeq ($(BDW_SIM_RUNTIME),)
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ];  then echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run -all" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
else
	@if [ ! -f $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ]; then  echo "onbreak resume" > $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do ; echo "run $(BDW_SIM_RUNTIME) ns" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "$(BDW_MTI_POST_SIM_COMMANDS)" >> $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; echo "quit" >>  $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do; fi
endif
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_vsimvlog -c -lib $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/work top1 $(BDW_VLOG_TOP_MODS)\
		$(BDW_VLOGSIM_ARGS)  $(BDW_VLOGSIM_ARGSINT) -do $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/mti.do \
		-l $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim_verilog.log \
		2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log


BDW_NCSC_64BIT = -64bit

ifneq ($(BDW_HUB_ARGV),)
BDW_NCSIM_ARGV = +systemc_args+"$(BDW_HUB_ARGV)" +BDW_VLOG_PLUSARGS+"$(BDW_HUB_ARGV)"
else
BDW_NCSIM_ARGV =
endif

ifeq ($(RUN_DEBUGGER), 1)
BDW_NCSIM_DEBUG = -layout cdebug
BDW_NCVLG_DEBUG = -layout cdebug -linedebug
else
BDW_NCSIM_DEBUG =
BDW_NCVLG_DEBUG =
endif

ncsc: incisive_covsetup
ifneq ($(PASSED_LOG),)
	rm -f $(PASSED_LOG)
endif
	@bdw_hls_systemc -check -project project.tcl
	@bdw_incisive_info -cxx11_abi_compat
	$(BDW_SIMCONFIG_MKDIR)
	$(STRATUS_HOME)/bin/bdw_shell $(BDW_TCL_DIR)/bdw_siminfo.tcl -gen_ncsim_cmd project.tcl $(BDW_SIM_CONFIG)
ifneq ($(RUN_DEBUGGER),1)
	@echo "run" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
	@echo "exit" >>$(BDW_SIM_CONFIG_DIR)/ncsim_cmd.tcl
endif
ifneq ($(VLOG_COSIM_TOP), )
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) $(BDW_NCVLG_DEBUG) \
	$(BDW_NCSC_GCCVER) \
	-CFLAGS " "  \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	+loadpli1=$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME)/ncvlog_ssl:ssl_bootstrap \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_VLOGCOMP_ARGS) \
	$(BDW_XRUN_ELAB) \
	$(BDW_VLOGSIM_ARGS) \
	$(BDW_VLOGSIM_ARGSINT) \
	$(BDW_VERILOG_SIM_ARGS) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

else
	$(BDW_STRT_OF_SIM_CMD)
	$(BDW_EXEC_CMD) $(BDW_SIM_ENV_SETUP) \
	bdw_exec -jobproject project.tcl -job sim.$(BDW_SIM_CONFIG).s \
	hub_ncsim \
	-work $(BDW_SIM_CONFIG) -reflib worklib $(BDW_LIBREF_ARGS) \
	-messages $(BDW_NCSC_64BIT) \
	$(BDW_NCSC_GCCVER) \
	$(BDW_VLOGSIM_ARGS) $(BDW_NCSIM_DEBUG) \
	$(BDW_VERILOG_SIM_ARGS) \
	-CFLAGS " "  \
	$(BDW_XRUN_FLAGS) \
	$(SIM_OBJS) \
	$(BDW_EXTRA_OBJS) \
	$(BDW_EXTRA_LIBS) \
	$(BDW_ESC_LIB) \
	$(BDW_CPARTS_A) \
	$(BDW_NCSC_FSDBLIBS) \
	$(BDW_EXTRA_LDFLAGS) \
	$(BDW_EXTRA_LIB_FLAGS) \
	$(BDW_COV_LIB_FLAGS) \
	-file $(BDW_SIM_CONFIG_DIR)/siminfo \
	$(BDW_XRUN_ELAB) \
	$(BDW_INCISIVE_FRONTEND) \
	$(BDW_VLOG_DEFINES) \
	$(BDW_NCSC_INPUT_FILE) \
	$(BDW_SC_TOP) $(BDW_VLOG_TOP_MODS) $(BDW_NCSIM_ARGV) \
	$(BDW_VERILOG_TESTBENCH) \
	2>&1 | tee $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log

endif
ifneq ($(BDW_XRUN_ELAB),-elaborate)
	$(BDW_END_OF_SIM_CMD) 2>&1 | tee -a $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/bdw_sim.log
endif



##############################################################
## Rule to build the COSIM shared library
##############################################################
ifeq ($(BDW_DEBUG),1)
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/debug/sim_$(BDW_SIM_CONFIG).so
else
BDW_SHARED_LIB = $(BDW_SIMDIR)/$(BDW_SIM_CONFIG)/xcelium/sim_$(BDW_SIM_CONFIG).so
endif

ifneq ($(BDW_TMPLNK_DIR),)
$(BDW_SHARED_LIB): $(BDW_SIM_OBJS) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	[ -z "$(BDW_LIBPREP)" ] || $(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_LIBPREP)`
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/TPtools/gcclib/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_TMPLNK_FILE)  \
		$(BDW_SIM_OBJS)  \
		`$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_CPARTS_A)` \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}
		mv $(BDW_TMPLNK_FILE) $(BDW_SHARED_LIB)

else
$(BDW_SHARED_LIB): $(BDW_SIM_OBJS) $(BDW_EXTRA_OBJS) $(BDW_EXTRA_LIBS) $(BDW_ESC_LIB) 
	@if [ ! -d $(@D) ]; then mkdir -p $(@D); fi
	[ -z "$(BDW_LIBPREP)" ] || $(MAKE) `$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_LIBPREP)`
	$(BDW_LINK) ${BDW_SHLIBFLAG} $(BDW_EXTRA_LDFLAGS) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/stratus/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/TPtools/gcclib/$(LIBDIR_NAME) \
        -Wl,-rpath,$(STRATUS_HOME)/tools.$(STRATUS_PLATFORM)/$(LIBDIR_NAME) \
        -Wl,-rpath,$(SYSTEMC)/$(BDW_SYSTEMC_LIBDIR) \
        -Wl,--enable-new-dtags \
		-o $(BDW_SHARED_LIB) \
		$(BDW_SIM_OBJS)  \
		`$(BDW_SPEC_FILTER) project.db $(BDW_SPEC_ARG) $(BDW_CPARTS_A)` \
		$(BDW_EXTRA_OBJS) \
		$(BDW_EXTRA_LIBS) \
        $(BDW_ESC_LIB) \
		$(BDW_HUBLIBS) $(BDW_EXTRA_LIB_FLAGS) $(BDW_COV_LIB_FLAGS) \
		-lm -lcrypt -ldl \
		${BDW_LINKOUTFILTER}

endif


##############################################################
## Start the stratus_ide GUI
##############################################################
workbench ide: 
	$(BDW_LAUNCH_IDE_COMMAND) $(BDW_STRATUS_IDE_COMMAND) -project project.tcl

##############################################################
## Generate a Visual C++ project file
##############################################################
vcproj: $(BDW_ALL_WRAPPERS)
	$(STRATUS_HOME)/bin/bdw_vcprojgen project.tcl

##############################################################
## Rule to build the synthesis report
##############################################################

html_warn:
	@echo "##############################################" ; \
	echo " The HTML reports have been deprecated. " ; \
	echo " Reporting information is available in stratus_ide." ; \
	echo "" ; \
	echo -n " Do you want to generate deprecated HTML reports (y or n) [n] ? " ; \
	read resp ; \
	case $$resp in \
	y*) $(MAKE) html ;; \
	*) echo ""; echo "HTML Reports not generated." ;  \
	esac
 
html:   html_datapath_BASIC html_controller_BASIC html_memory_map_BASIC html_top_BASIC html_summary

html_summary: project.tcl
	$(STRATUS_HOME)/bin/bdw_htmlgen -project project.tcl -summary




##############################################################
## Rules to build generated library contents
##############################################################


